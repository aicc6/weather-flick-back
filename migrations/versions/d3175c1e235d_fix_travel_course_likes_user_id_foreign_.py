"""fix travel_course_likes user_id foreign key

Revision ID: d3175c1e235d
Revises: create_reviews_recommend
Create Date: 2025-07-14 14:15:26.105392

"""
from collections.abc import Sequence

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = 'd3175c1e235d'
down_revision: str | Sequence[str] | None = 'create_reviews_recommend'
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('unified_regions',
    sa.Column('region_id', sa.UUID(), nullable=False),
    sa.Column('region_code', sa.String(), nullable=True),
    sa.Column('parent_region_id', sa.UUID(), nullable=True),
    sa.Column('region_name', sa.String(), nullable=False),
    sa.Column('region_name_full', sa.String(), nullable=True),
    sa.Column('region_name_en', sa.String(), nullable=True),
    sa.Column('region_level', sa.Integer(), nullable=True),
    sa.Column('center_latitude', sa.String(), nullable=True),
    sa.Column('center_longitude', sa.String(), nullable=True),
    sa.Column('boundary_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('administrative_code', sa.String(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('region_id')
    )
    op.create_index('idx_unified_regions_code_level', 'unified_regions', ['region_code', 'region_level'], unique=False)
    op.create_index(op.f('ix_unified_regions_parent_region_id'), 'unified_regions', ['parent_region_id'], unique=False)
    op.create_index(op.f('ix_unified_regions_region_code'), 'unified_regions', ['region_code'], unique=True)
    op.create_index(op.f('ix_unified_regions_region_id'), 'unified_regions', ['region_id'], unique=False)
    op.drop_table('kma_api_metadata')
    op.drop_index(op.f('idx_content_images_content_id'), table_name='content_images')
    op.drop_index(op.f('idx_content_images_content_type'), table_name='content_images')
    op.drop_index(op.f('idx_content_images_serial'), table_name='content_images')
    op.drop_index(op.f('idx_content_images_sync_at'), table_name='content_images')
    op.drop_table('content_images')
    op.drop_index(op.f('idx_api_raw_data_archived'), table_name='api_raw_data')
    op.drop_index(op.f('idx_api_raw_data_created_at'), table_name='api_raw_data')
    op.drop_index(op.f('idx_api_raw_data_expires_at'), table_name='api_raw_data')
    # op.drop_index(op.f('idx_api_raw_data_provider_endpoint'), table_name='api_raw_data')
    # op.drop_table('api_raw_data')
    op.drop_table('data_quality_thresholds')
    op.drop_index(op.f('idx_transformation_logs_created_at'), table_name='data_transformation_logs')
    op.drop_index(op.f('idx_transformation_logs_status'), table_name='data_transformation_logs')
    op.drop_index(op.f('idx_transformation_logs_target_table'), table_name='data_transformation_logs')
    op.drop_table('data_transformation_logs')
    op.drop_table('region_sync_logs')
    op.drop_index(op.f('idx_leisure_location'), table_name='leisure_sports')
    op.drop_index(op.f('idx_leisure_region'), table_name='leisure_sports')
    op.drop_index(op.f('idx_leisure_sports_booktour'), table_name='leisure_sports')
    op.drop_index(op.f('idx_leisure_sports_createdtime'), table_name='leisure_sports')
    op.drop_index(op.f('idx_leisure_sports_modifiedtime'), table_name='leisure_sports')
    op.drop_index(op.f('idx_leisure_type'), table_name='leisure_sports')
    op.drop_table('leisure_sports')
    op.drop_table('kto_api_metadata')
    op.drop_index(op.f('idx_admin_activity_logs_action'), table_name='admin_activity_logs')
    op.drop_index(op.f('idx_admin_activity_logs_admin_date'), table_name='admin_activity_logs')
    op.drop_index(op.f('idx_admin_activity_logs_admin_id'), table_name='admin_activity_logs')
    op.drop_index(op.f('idx_admin_activity_logs_created_at'), table_name='admin_activity_logs')
    op.drop_index(op.f('idx_admin_activity_logs_severity'), table_name='admin_activity_logs')
    op.drop_index(op.f('idx_admin_activity_logs_severity_date'), table_name='admin_activity_logs')
    op.drop_table('admin_activity_logs')
    op.drop_index(op.f('idx_batch_job_logs_created_at'), table_name='batch_job_logs')
    op.drop_index(op.f('idx_batch_job_logs_job_name'), table_name='batch_job_logs')
    op.drop_index(op.f('idx_batch_job_logs_status'), table_name='batch_job_logs')
    op.drop_table('batch_job_logs')
    op.drop_index(op.f('idx_attraction_score'), table_name='travel_weather_scores')
    op.drop_index(op.f('idx_region_date'), table_name='travel_weather_scores')
    op.drop_index(op.f('idx_scores_attraction_score'), table_name='travel_weather_scores')
    op.drop_index(op.f('idx_scores_region_date'), table_name='travel_weather_scores')
    op.drop_index(op.f('idx_travel_weather_scores_region_date'), table_name='travel_weather_scores')
    op.drop_table('travel_weather_scores')
    op.drop_index(op.f('idx_quality_check_date'), table_name='data_quality_checks')
    op.drop_index(op.f('idx_quality_table_date'), table_name='data_quality_checks')
    op.drop_index(op.f('idx_table_date'), table_name='data_quality_checks')
    op.drop_table('data_quality_checks')
    op.drop_table('region_api_mappings')
    op.drop_index(op.f('ix_apscheduler_jobs_next_run_time'), table_name='apscheduler_jobs')
    op.drop_table('apscheduler_jobs')
    op.drop_index(op.f('idx_weather_base_date'), table_name='weather_forecasts')
    op.drop_index(op.f('idx_weather_forecasts_coordinates'), table_name='weather_forecasts')
    op.drop_index(op.f('idx_weather_forecasts_created_at'), table_name='weather_forecasts')
    op.drop_index(op.f('idx_weather_forecasts_date_only'), table_name='weather_forecasts')
    op.drop_index(op.f('idx_weather_forecasts_quality'), table_name='weather_forecasts', postgresql_where='((min_temp IS NULL) OR (max_temp IS NULL) OR (weather_condition IS NULL))')
    op.drop_index(op.f('idx_weather_forecasts_raw_data_id'), table_name='weather_forecasts')
    op.drop_index(op.f('idx_weather_forecasts_region_date'), table_name='weather_forecasts')
    op.drop_index(op.f('idx_weather_forecasts_type_date'), table_name='weather_forecasts', postgresql_where='(forecast_type IS NOT NULL)')
    op.drop_table('weather_forecasts')
    op.drop_index(op.f('idx_classification_codes_code'), table_name='classification_system_codes')
    op.drop_index(op.f('idx_classification_codes_level'), table_name='classification_system_codes')
    op.drop_index(op.f('idx_classification_codes_parent'), table_name='classification_system_codes')
    op.drop_table('classification_system_codes')
    op.drop_index(op.f('ix_city_weather_data_city_name'), table_name='city_weather_data')
    op.drop_index(op.f('ix_city_weather_data_id'), table_name='city_weather_data')
    op.drop_table('city_weather_data')
    op.drop_table('coordinate_transformations')
    op.drop_table('cleanup_backup')
    op.drop_index(op.f('idx_area_sync_list_area_codes'), table_name='area_based_sync_list')
    op.drop_index(op.f('idx_area_sync_list_content_id'), table_name='area_based_sync_list')
    op.drop_index(op.f('idx_area_sync_list_location'), table_name='area_based_sync_list')
    op.drop_index(op.f('idx_area_sync_list_modified'), table_name='area_based_sync_list')
    op.drop_table('area_based_sync_list')
    op.drop_index(op.f('idx_content_detail_info_content_id'), table_name='content_detail_info')
    op.drop_index(op.f('idx_content_detail_info_content_type'), table_name='content_detail_info')
    op.drop_index(op.f('idx_content_detail_info_serial'), table_name='content_detail_info')
    op.drop_table('content_detail_info')
    op.alter_column('accommodations', 'accommodation_type',
               existing_type=sa.VARCHAR(length=50),
               nullable=False)
    op.alter_column('accommodations', 'address',
               existing_type=sa.VARCHAR(length=300),
               nullable=False)
    op.alter_column('accommodations', 'latitude',
               existing_type=sa.NUMERIC(precision=10, scale=8),
               type_=sa.Float(),
               existing_nullable=True)
    op.alter_column('accommodations', 'longitude',
               existing_type=sa.NUMERIC(precision=11, scale=8),
               type_=sa.Float(),
               existing_nullable=True)
    op.drop_index(op.f('idx_accommodation_region'), table_name='accommodations')
    op.drop_index(op.f('idx_accommodation_type'), table_name='accommodations')
    op.drop_index(op.f('idx_accommodations_booktour'), table_name='accommodations')
    op.drop_index(op.f('idx_accommodations_createdtime'), table_name='accommodations')
    op.drop_index(op.f('idx_accommodations_modifiedtime'), table_name='accommodations')
    op.create_index('idx_accommodations_region_type', 'accommodations', ['region_code', 'accommodation_type'], unique=False)
    op.create_index(op.f('ix_accommodations_content_id'), 'accommodations', ['content_id'], unique=False)
    op.create_index(op.f('ix_accommodations_raw_data_id'), 'accommodations', ['raw_data_id'], unique=False)
    op.create_index(op.f('ix_accommodations_region_code'), 'accommodations', ['region_code'], unique=False)
    op.drop_constraint(op.f('accommodations_raw_data_id_fkey'), 'accommodations', type_='foreignkey')
    op.drop_column('accommodations', 'homepage')
    op.drop_column('accommodations', 'campfire')
    op.drop_column('accommodations', 'telname')
    op.drop_column('accommodations', 'fitness')
    op.drop_column('accommodations', 'first_image')
    op.drop_column('accommodations', 'sauna')
    op.drop_column('accommodations', 'booktour')
    op.drop_column('accommodations', 'overview')
    op.drop_column('accommodations', 'seminar')
    op.drop_column('accommodations', 'first_image_small')
    op.drop_column('accommodations', 'sigungu_code')
    op.drop_column('accommodations', 'cooking')
    op.drop_column('accommodations', 'createdtime')
    op.drop_column('accommodations', 'checkout_time')
    op.drop_column('accommodations', 'detail_intro_info')
    op.drop_column('accommodations', 'faxno')
    op.drop_column('accommodations', 'sports')
    op.drop_column('accommodations', 'detail_additional_info')
    op.drop_column('accommodations', 'modifiedtime')
    op.drop_column('accommodations', 'processing_status')
    op.drop_column('accommodations', 'data_quality_score')
    op.drop_column('accommodations', 'room_count')
    op.drop_column('accommodations', 'beauty')
    op.drop_column('accommodations', 'bicycle')
    op.drop_column('accommodations', 'detail_address')
    op.drop_column('accommodations', 'barbecue')
    op.drop_column('accommodations', 'updated_at')
    op.drop_column('accommodations', 'mlevel')
    op.drop_column('accommodations', 'room_amenities')
    op.drop_column('accommodations', 'zipcode')
    op.drop_column('accommodations', 'karaoke')
    op.drop_column('accommodations', 'pickup_service')
    op.drop_column('accommodations', 'public_bath')
    op.drop_column('accommodations', 'last_sync_at')
    op.drop_column('accommodations', 'public_pc')
    op.drop_column('accommodations', 'checkin_time')
    op.alter_column('admins', 'status', server_default=None)
    op.alter_column(
        'admins',
        'status',
        existing_type=sa.VARCHAR(length=20),
        type_=sa.Enum('ACTIVE', 'INACTIVE', 'LOCKED', name='adminstatus'),
        existing_nullable=True,
        postgresql_using="status::adminstatus"
    )
    op.alter_column('admins', 'status', server_default=sa.text("'ACTIVE'::adminstatus"))
    op.drop_index(op.f('idx_admins_is_superuser'), table_name='admins')
    op.drop_column('admins', 'is_superuser')
    op.alter_column('category_codes', 'category_level',
               existing_type=sa.SMALLINT(),
               type_=sa.Integer(),
               nullable=True)
    op.drop_index(op.f('idx_category_level'), table_name='category_codes')
    op.drop_index(op.f('idx_content_type'), table_name='category_codes')
    op.drop_index(op.f('idx_parent_category'), table_name='category_codes')
    op.add_column('contact', sa.Column('is_private', sa.Boolean(), nullable=False, server_default=sa.false()))
    op.add_column('contact', sa.Column('password', sa.String(length=128), nullable=True))
    op.alter_column('contact', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.create_index(op.f('ix_contact_id'), 'contact', ['id'], unique=False)
    op.alter_column('cultural_facilities', 'zipcode',
               existing_type=sa.VARCHAR(length=10),
               comment=None,
               existing_comment='우편번호',
               existing_nullable=True)
    op.alter_column('cultural_facilities', 'tel',
               existing_type=sa.VARCHAR(length=500),
               type_=sa.String(length=50),
               existing_nullable=True)
    op.alter_column('cultural_facilities', 'homepage',
               existing_type=sa.VARCHAR(length=500),
               type_=sa.Text(),
               comment=None,
               existing_comment='홈페이지 URL',
               existing_nullable=True)
    op.alter_column('cultural_facilities', 'booktour',
               existing_type=sa.CHAR(length=1),
               type_=sa.String(length=1),
               comment=None,
               existing_comment='교과서속여행지여부 (Y/N)',
               existing_nullable=True)
    op.alter_column('cultural_facilities', 'createdtime',
               existing_type=sa.VARCHAR(length=14),
               comment=None,
               existing_comment='콘텐츠 최초 등록일 (YYYYMMDDHHMMSS)',
               existing_nullable=True)
    op.alter_column('cultural_facilities', 'modifiedtime',
               existing_type=sa.VARCHAR(length=14),
               comment=None,
               existing_comment='콘텐츠 최종 수정일 (YYYYMMDDHHMMSS)',
               existing_nullable=True)
    op.alter_column('cultural_facilities', 'telname',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='전화번호명',
               existing_nullable=True)
    op.alter_column('cultural_facilities', 'faxno',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='팩스번호',
               existing_nullable=True)
    op.alter_column('cultural_facilities', 'mlevel',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='맵레벨',
               existing_nullable=True)
    op.alter_column('cultural_facilities', 'detail_intro_info',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment=None,
               existing_comment='컨텐츠 타입별 세부 정보 (JSON)',
               existing_nullable=True)
    op.alter_column('cultural_facilities', 'detail_additional_info',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment=None,
               existing_comment='부대시설/이용안내 등 추가 정보 (JSON)',
               existing_nullable=True)
    op.drop_index(op.f('idx_cultural_category'), table_name='cultural_facilities')
    op.drop_index(op.f('idx_cultural_facilities_booktour'), table_name='cultural_facilities')
    op.drop_index(op.f('idx_cultural_facilities_createdtime'), table_name='cultural_facilities')
    op.drop_index(op.f('idx_cultural_facilities_modifiedtime'), table_name='cultural_facilities')
    op.drop_index(op.f('idx_cultural_location'), table_name='cultural_facilities')
    op.drop_index(op.f('idx_cultural_region'), table_name='cultural_facilities')
    op.drop_index(op.f('idx_cultural_type'), table_name='cultural_facilities')
    op.create_index('idx_cultural_facilities_region_type', 'cultural_facilities', ['region_code', 'facility_type'], unique=False)
    op.create_index(op.f('ix_cultural_facilities_content_id'), 'cultural_facilities', ['content_id'], unique=False)
    op.create_index(op.f('ix_cultural_facilities_facility_name'), 'cultural_facilities', ['facility_name'], unique=False)
    op.create_index(op.f('ix_cultural_facilities_raw_data_id'), 'cultural_facilities', ['raw_data_id'], unique=False)
    op.create_index(op.f('ix_cultural_facilities_region_code'), 'cultural_facilities', ['region_code'], unique=False)
    op.drop_constraint(op.f('cultural_facilities_raw_data_id_fkey'), 'cultural_facilities', type_='foreignkey')
    op.drop_column('cultural_facilities', 'sigungu_code')
    op.drop_column('favorite_places', 'destination_id')
    op.add_column('festivals_events', sa.Column('description', sa.Text(), nullable=True))
    op.alter_column('festivals_events', 'zipcode',
               existing_type=sa.VARCHAR(length=10),
               comment=None,
               existing_comment='우편번호',
               existing_nullable=True)
    op.alter_column('festivals_events', 'tel',
               existing_type=sa.VARCHAR(length=500),
               type_=sa.String(length=50),
               existing_nullable=True)
    op.alter_column('festivals_events', 'homepage',
               existing_type=sa.VARCHAR(length=500),
               type_=sa.Text(),
               comment=None,
               existing_comment='홈페이지 URL',
               existing_nullable=True)
    op.alter_column('festivals_events', 'booktour',
               existing_type=sa.CHAR(length=1),
               type_=sa.String(length=1),
               comment=None,
               existing_comment='교과서속여행지여부 (Y/N)',
               existing_nullable=True)
    op.alter_column('festivals_events', 'createdtime',
               existing_type=sa.VARCHAR(length=14),
               comment=None,
               existing_comment='콘텐츠 최초 등록일 (YYYYMMDDHHMMSS)',
               existing_nullable=True)
    op.alter_column('festivals_events', 'modifiedtime',
               existing_type=sa.VARCHAR(length=14),
               comment=None,
               existing_comment='콘텐츠 최종 수정일 (YYYYMMDDHHMMSS)',
               existing_nullable=True)
    op.alter_column('festivals_events', 'telname',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='전화번호명',
               existing_nullable=True)
    op.alter_column('festivals_events', 'faxno',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='팩스번호',
               existing_nullable=True)
    op.alter_column('festivals_events', 'mlevel',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='맵레벨',
               existing_nullable=True)
    op.alter_column('festivals_events', 'detail_intro_info',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment=None,
               existing_comment='컨텐츠 타입별 세부 정보 (JSON)',
               existing_nullable=True)
    op.alter_column('festivals_events', 'detail_additional_info',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment=None,
               existing_comment='부대시설/이용안내 등 추가 정보 (JSON)',
               existing_nullable=True)
    op.drop_index(op.f('idx_festival_category'), table_name='festivals_events')
    op.drop_index(op.f('idx_festival_dates'), table_name='festivals_events')
    op.drop_index(op.f('idx_festival_location'), table_name='festivals_events')
    op.drop_index(op.f('idx_festival_region'), table_name='festivals_events')
    op.drop_index(op.f('idx_festivals_events_booktour'), table_name='festivals_events')
    op.drop_index(op.f('idx_festivals_events_createdtime'), table_name='festivals_events')
    op.drop_index(op.f('idx_festivals_events_modifiedtime'), table_name='festivals_events')
    op.create_index('idx_festivals_events_region_dates', 'festivals_events', ['region_code', 'event_start_date', 'event_end_date'], unique=False)
    op.create_index(op.f('ix_festivals_events_content_id'), 'festivals_events', ['content_id'], unique=False)
    op.create_index(op.f('ix_festivals_events_event_name'), 'festivals_events', ['event_name'], unique=False)
    op.create_index(op.f('ix_festivals_events_raw_data_id'), 'festivals_events', ['raw_data_id'], unique=False)
    op.create_index(op.f('ix_festivals_events_region_code'), 'festivals_events', ['region_code'], unique=False)
    op.drop_constraint(op.f('festivals_events_raw_data_id_fkey'), 'festivals_events', type_='foreignkey')
    op.drop_column('festivals_events', 'sigungu_code')
    op.drop_index(op.f('idx_pet_tour_info_area_codes'), table_name='pet_tour_info')
    op.drop_index(op.f('idx_pet_tour_info_location'), table_name='pet_tour_info')
    op.drop_index(op.f('idx_pet_tour_info_sync_at'), table_name='pet_tour_info')
    op.create_index(op.f('ix_pet_tour_info_id'), 'pet_tour_info', ['id'], unique=False)
    op.create_index(op.f('ix_pet_tour_info_raw_data_id'), 'pet_tour_info', ['raw_data_id'], unique=False)
    op.drop_constraint(op.f('pet_tour_info_raw_data_id_fkey'), 'pet_tour_info', type_='foreignkey')
    op.drop_table_comment(
        'pet_tour_info',
        existing_comment='반려동물 동반여행 정보 (detailPetTour2 API)',
        schema=None
    )
    op.alter_column('regions', 'latitude',
               existing_type=sa.NUMERIC(precision=10, scale=8),
               type_=sa.Float(),
               existing_nullable=True)
    op.alter_column('regions', 'longitude',
               existing_type=sa.NUMERIC(precision=11, scale=8),
               type_=sa.Float(),
               existing_nullable=True)
    op.alter_column('regions', 'region_level',
               existing_type=sa.SMALLINT(),
               type_=sa.Integer(),
               nullable=True)
    op.drop_index(op.f('idx_parent_region'), table_name='regions')
    op.drop_index(op.f('idx_region_level'), table_name='regions')
    op.drop_column('regions', 'center_latitude')
    op.drop_column('regions', 'boundary_data')
    op.drop_column('regions', 'region_name_full')
    op.drop_column('regions', 'administrative_code')
    op.drop_column('regions', 'center_longitude')
    op.drop_column('regions', 'grid_y')
    op.drop_column('regions', 'region_name_en')
    op.drop_column('regions', 'is_active')
    op.drop_column('regions', 'grid_x')
    op.alter_column('restaurants', 'zipcode',
               existing_type=sa.VARCHAR(length=10),
               comment=None,
               existing_comment='우편번호',
               existing_nullable=True)
    op.alter_column('restaurants', 'latitude',
               existing_type=sa.NUMERIC(precision=10, scale=8),
               type_=sa.Float(),
               existing_nullable=True)
    op.alter_column('restaurants', 'longitude',
               existing_type=sa.NUMERIC(precision=11, scale=8),
               type_=sa.Float(),
               existing_nullable=True)
    op.alter_column('restaurants', 'homepage',
               existing_type=sa.VARCHAR(length=500),
               comment=None,
               existing_comment='홈페이지 URL',
               existing_nullable=True)
    op.alter_column('restaurants', 'data_quality_score',
               existing_type=sa.NUMERIC(precision=5, scale=2),
               type_=sa.Float(),
               existing_nullable=True)
    op.drop_index(op.f('idx_restaurant_cuisine'), table_name='restaurants')
    op.drop_index(op.f('idx_restaurant_region'), table_name='restaurants')
    op.drop_index(op.f('idx_restaurants_booktour'), table_name='restaurants')
    op.drop_index(op.f('idx_restaurants_createdtime'), table_name='restaurants')
    op.drop_index(op.f('idx_restaurants_modifiedtime'), table_name='restaurants')
    op.create_index('idx_restaurants_region_cuisine', 'restaurants', ['region_code', 'cuisine_type'], unique=False)
    op.create_index(op.f('ix_restaurants_raw_data_id'), 'restaurants', ['raw_data_id'], unique=False)
    op.create_index(op.f('ix_restaurants_restaurant_name'), 'restaurants', ['restaurant_name'], unique=False)
    op.drop_constraint(op.f('restaurants_raw_data_id_fkey'), 'restaurants', type_='foreignkey')
    op.drop_column('restaurants', 'sigungu_code')
    op.drop_column('restaurants', 'createdtime')
    op.drop_column('restaurants', 'telname')
    op.drop_column('restaurants', 'detail_intro_info')
    op.drop_column('restaurants', 'faxno')
    op.drop_column('restaurants', 'detail_additional_info')
    op.drop_column('restaurants', 'modifiedtime')
    op.drop_column('restaurants', 'mlevel')
    op.drop_column('restaurants', 'booktour')
    op.create_foreign_key(None, 'review_likes', 'reviews_recommend', ['review_id'], ['id'])
    op.create_index('idx_review_user_rating', 'reviews', ['user_id', 'rating'], unique=False)
    op.alter_column('shopping', 'zipcode',
               existing_type=sa.VARCHAR(length=10),
               comment=None,
               existing_comment='우편번호',
               existing_nullable=True)
    op.alter_column('shopping', 'tel',
               existing_type=sa.VARCHAR(length=500),
               type_=sa.String(length=50),
               existing_nullable=True)
    op.alter_column('shopping', 'homepage',
               existing_type=sa.VARCHAR(length=500),
               type_=sa.Text(),
               comment=None,
               existing_comment='홈페이지 URL',
               existing_nullable=True)
    op.alter_column('shopping', 'booktour',
               existing_type=sa.CHAR(length=1),
               type_=sa.String(length=1),
               comment=None,
               existing_comment='교과서속여행지여부 (Y/N)',
               existing_nullable=True)
    op.alter_column('shopping', 'createdtime',
               existing_type=sa.VARCHAR(length=14),
               comment=None,
               existing_comment='콘텐츠 최초 등록일 (YYYYMMDDHHMMSS)',
               existing_nullable=True)
    op.alter_column('shopping', 'modifiedtime',
               existing_type=sa.VARCHAR(length=14),
               comment=None,
               existing_comment='콘텐츠 최종 수정일 (YYYYMMDDHHMMSS)',
               existing_nullable=True)
    op.alter_column('shopping', 'telname',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='전화번호명',
               existing_nullable=True)
    op.alter_column('shopping', 'faxno',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='팩스번호',
               existing_nullable=True)
    op.alter_column('shopping', 'mlevel',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='맵레벨',
               existing_nullable=True)
    op.alter_column('shopping', 'detail_intro_info',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment=None,
               existing_comment='컨텐츠 타입별 세부 정보 (JSON)',
               existing_nullable=True)
    op.alter_column('shopping', 'detail_additional_info',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment=None,
               existing_comment='부대시설/이용안내 등 추가 정보 (JSON)',
               existing_nullable=True)
    op.drop_index(op.f('idx_shopping_booktour'), table_name='shopping')
    op.drop_index(op.f('idx_shopping_createdtime'), table_name='shopping')
    op.drop_index(op.f('idx_shopping_location'), table_name='shopping')
    op.drop_index(op.f('idx_shopping_modifiedtime'), table_name='shopping')
    op.drop_index(op.f('idx_shopping_region'), table_name='shopping')
    op.drop_index(op.f('idx_shopping_type'), table_name='shopping')
    op.create_index('idx_shopping_region_type', 'shopping', ['region_code', 'shop_type'], unique=False)
    op.create_index(op.f('ix_shopping_content_id'), 'shopping', ['content_id'], unique=False)
    op.create_index(op.f('ix_shopping_raw_data_id'), 'shopping', ['raw_data_id'], unique=False)
    op.create_index(op.f('ix_shopping_region_code'), 'shopping', ['region_code'], unique=False)
    op.create_index(op.f('ix_shopping_shop_name'), 'shopping', ['shop_name'], unique=False)
    op.drop_constraint(op.f('shopping_raw_data_id_fkey'), 'shopping', type_='foreignkey')
    op.drop_column('shopping', 'sigungu_code')
    op.alter_column('tourist_attractions', 'zipcode',
               existing_type=sa.VARCHAR(length=10),
               comment=None,
               existing_comment='우편번호',
               existing_nullable=True)
    op.alter_column('tourist_attractions', 'homepage',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='홈페이지 URL',
               existing_nullable=True)
    op.alter_column('tourist_attractions', 'booktour',
               existing_type=sa.CHAR(length=1),
               type_=sa.String(length=1),
               comment=None,
               existing_comment='교과서속여행지여부 (Y/N)',
               existing_nullable=True)
    op.alter_column('tourist_attractions', 'createdtime',
               existing_type=sa.VARCHAR(length=14),
               comment=None,
               existing_comment='콘텐츠 최초 등록일 (YYYYMMDDHHMMSS)',
               existing_nullable=True)
    op.alter_column('tourist_attractions', 'modifiedtime',
               existing_type=sa.VARCHAR(length=14),
               comment=None,
               existing_comment='콘텐츠 최종 수정일 (YYYYMMDDHHMMSS)',
               existing_nullable=True)
    op.alter_column('tourist_attractions', 'telname',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='전화번호명',
               existing_nullable=True)
    op.alter_column('tourist_attractions', 'faxno',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='팩스번호',
               existing_nullable=True)
    op.alter_column('tourist_attractions', 'mlevel',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='맵레벨',
               existing_nullable=True)
    op.alter_column('tourist_attractions', 'detail_intro_info',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment=None,
               existing_comment='컨텐츠 타입별 세부 정보 (JSON)',
               existing_nullable=True)
    op.alter_column('tourist_attractions', 'detail_additional_info',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment=None,
               existing_comment='부대시설/이용안내 등 추가 정보 (JSON)',
               existing_nullable=True)
    op.drop_index(op.f('idx_category'), table_name='tourist_attractions')
    op.drop_index(op.f('idx_location'), table_name='tourist_attractions')
    op.drop_index(op.f('idx_region_code'), table_name='tourist_attractions')
    op.drop_index(op.f('idx_tourist_attractions_booktour'), table_name='tourist_attractions')
    op.drop_index(op.f('idx_tourist_attractions_createdtime'), table_name='tourist_attractions')
    op.drop_index(op.f('idx_tourist_attractions_modifiedtime'), table_name='tourist_attractions')
    op.drop_index(op.f('idx_tourist_category'), table_name='tourist_attractions')
    op.drop_index(op.f('idx_tourist_location'), table_name='tourist_attractions')
    op.drop_index(op.f('idx_tourist_region_code'), table_name='tourist_attractions')
    op.create_index('idx_tourist_attractions_region_category', 'tourist_attractions', ['region_code', 'category_code'], unique=False)
    op.create_index(op.f('ix_tourist_attractions_attraction_name'), 'tourist_attractions', ['attraction_name'], unique=False)
    op.create_index(op.f('ix_tourist_attractions_content_id'), 'tourist_attractions', ['content_id'], unique=False)
    op.create_index(op.f('ix_tourist_attractions_raw_data_id'), 'tourist_attractions', ['raw_data_id'], unique=False)
    op.create_index(op.f('ix_tourist_attractions_region_code'), 'tourist_attractions', ['region_code'], unique=False)
    op.drop_constraint(op.f('tourist_attractions_raw_data_id_fkey'), 'tourist_attractions', type_='foreignkey')
    op.alter_column('travel_course_likes', 'user_id',
               existing_type=sa.INTEGER(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('travel_course_likes', 'itinerary',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.create_index(op.f('ix_travel_course_likes_id'), 'travel_course_likes', ['id'], unique=False)
    op.create_foreign_key(None, 'travel_course_likes', 'users', ['user_id'], ['user_id'])
    op.alter_column('travel_courses', 'zipcode',
               existing_type=sa.VARCHAR(length=10),
               comment=None,
               existing_comment='우편번호',
               existing_nullable=True)
    op.alter_column('travel_courses', 'telname',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='전화번호명',
               existing_nullable=True)
    op.alter_column('travel_courses', 'faxno',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='팩스번호',
               existing_nullable=True)
    op.alter_column('travel_courses', 'homepage',
               existing_type=sa.VARCHAR(length=500),
               comment=None,
               existing_comment='홈페이지 URL',
               existing_nullable=True)
    op.alter_column('travel_courses', 'latitude',
               existing_type=sa.NUMERIC(precision=10, scale=8),
               type_=sa.Float(),
               existing_nullable=True)
    op.alter_column('travel_courses', 'longitude',
               existing_type=sa.NUMERIC(precision=11, scale=8),
               type_=sa.Float(),
               existing_nullable=True)
    op.alter_column('travel_courses', 'data_quality_score',
               existing_type=sa.NUMERIC(precision=5, scale=2),
               type_=sa.Float(),
               existing_nullable=True)
    op.alter_column('travel_courses', 'mlevel',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='맵레벨',
               existing_nullable=True)
    op.alter_column('travel_courses', 'detail_intro_info',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment=None,
               existing_comment='컨텐츠 타입별 세부 정보 (JSON)',
               existing_nullable=True)
    op.alter_column('travel_courses', 'detail_additional_info',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment=None,
               existing_comment='부대시설/이용안내 등 추가 정보 (JSON)',
               existing_nullable=True)
    op.alter_column('travel_courses', 'booktour',
               existing_type=sa.CHAR(length=1),
               type_=sa.String(length=1),
               comment=None,
               existing_comment='교과서속여행지여부 (Y/N)',
               existing_nullable=True)
    op.alter_column('travel_courses', 'createdtime',
               existing_type=sa.VARCHAR(length=14),
               comment=None,
               existing_comment='콘텐츠 최초 등록일 (YYYYMMDDHHMMSS)',
               existing_nullable=True)
    op.alter_column('travel_courses', 'modifiedtime',
               existing_type=sa.VARCHAR(length=14),
               comment=None,
               existing_comment='콘텐츠 최종 수정일 (YYYYMMDDHHMMSS)',
               existing_nullable=True)
    op.drop_index(op.f('idx_course_location'), table_name='travel_courses')
    op.drop_index(op.f('idx_course_region'), table_name='travel_courses')
    op.drop_index(op.f('idx_course_theme'), table_name='travel_courses')
    op.drop_index(op.f('idx_travel_courses_booktour'), table_name='travel_courses')
    op.drop_index(op.f('idx_travel_courses_createdtime'), table_name='travel_courses')
    op.drop_index(op.f('idx_travel_courses_modifiedtime'), table_name='travel_courses')
    op.drop_constraint(op.f('travel_courses_raw_data_id_fkey'), 'travel_courses', type_='foreignkey')
    op.drop_constraint(op.f('travel_courses_region_code_fkey'), 'travel_courses', type_='foreignkey')
    op.alter_column('travel_plans', 'budget',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               type_=sa.Float(),
               existing_nullable=True)
    op.drop_index(op.f('idx_travel_plans_plan_type'), table_name='travel_plans')
    op.create_index('idx_travel_plan_dates', 'travel_plans', ['start_date', 'end_date'], unique=False)
    op.create_index('idx_travel_plan_user_status', 'travel_plans', ['user_id', 'status'], unique=False)
    op.alter_column('users', 'role',
               existing_type=postgresql.ENUM('USER', 'ADMIN', name='userrole'),
               nullable=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('users', 'role',
               existing_type=postgresql.ENUM('USER', 'ADMIN', name='userrole'),
               nullable=False)
    op.drop_index('idx_travel_plan_user_status', table_name='travel_plans')
    op.drop_index('idx_travel_plan_dates', table_name='travel_plans')
    op.create_index(op.f('idx_travel_plans_plan_type'), 'travel_plans', ['plan_type'], unique=False)
    op.alter_column('travel_plans', 'budget',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=10, scale=2),
               existing_nullable=True)
    op.create_foreign_key(op.f('travel_courses_region_code_fkey'), 'travel_courses', 'regions', ['region_code'], ['region_code'])
    op.create_foreign_key(op.f('travel_courses_raw_data_id_fkey'), 'travel_courses', 'api_raw_data', ['raw_data_id'], ['id'])
    op.create_index(op.f('idx_travel_courses_modifiedtime'), 'travel_courses', ['modifiedtime'], unique=False)
    op.create_index(op.f('idx_travel_courses_createdtime'), 'travel_courses', ['createdtime'], unique=False)
    op.create_index(op.f('idx_travel_courses_booktour'), 'travel_courses', ['booktour'], unique=False)
    op.create_index(op.f('idx_course_theme'), 'travel_courses', ['course_theme'], unique=False)
    op.create_index(op.f('idx_course_region'), 'travel_courses', ['region_code'], unique=False)
    op.create_index(op.f('idx_course_location'), 'travel_courses', ['latitude', 'longitude'], unique=False)
    op.alter_column('travel_courses', 'modifiedtime',
               existing_type=sa.VARCHAR(length=14),
               comment='콘텐츠 최종 수정일 (YYYYMMDDHHMMSS)',
               existing_nullable=True)
    op.alter_column('travel_courses', 'createdtime',
               existing_type=sa.VARCHAR(length=14),
               comment='콘텐츠 최초 등록일 (YYYYMMDDHHMMSS)',
               existing_nullable=True)
    op.alter_column('travel_courses', 'booktour',
               existing_type=sa.String(length=1),
               type_=sa.CHAR(length=1),
               comment='교과서속여행지여부 (Y/N)',
               existing_nullable=True)
    op.alter_column('travel_courses', 'detail_additional_info',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment='부대시설/이용안내 등 추가 정보 (JSON)',
               existing_nullable=True)
    op.alter_column('travel_courses', 'detail_intro_info',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment='컨텐츠 타입별 세부 정보 (JSON)',
               existing_nullable=True)
    op.alter_column('travel_courses', 'mlevel',
               existing_type=sa.INTEGER(),
               comment='맵레벨',
               existing_nullable=True)
    op.alter_column('travel_courses', 'data_quality_score',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=5, scale=2),
               existing_nullable=True)
    op.alter_column('travel_courses', 'longitude',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=11, scale=8),
               existing_nullable=True)
    op.alter_column('travel_courses', 'latitude',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=10, scale=8),
               existing_nullable=True)
    op.alter_column('travel_courses', 'homepage',
               existing_type=sa.VARCHAR(length=500),
               comment='홈페이지 URL',
               existing_nullable=True)
    op.alter_column('travel_courses', 'faxno',
               existing_type=sa.VARCHAR(length=50),
               comment='팩스번호',
               existing_nullable=True)
    op.alter_column('travel_courses', 'telname',
               existing_type=sa.VARCHAR(length=100),
               comment='전화번호명',
               existing_nullable=True)
    op.alter_column('travel_courses', 'zipcode',
               existing_type=sa.VARCHAR(length=10),
               comment='우편번호',
               existing_nullable=True)
    op.drop_constraint(None, 'travel_course_likes', type_='foreignkey')
    op.drop_index(op.f('ix_travel_course_likes_id'), table_name='travel_course_likes')
    op.alter_column('travel_course_likes', 'itinerary',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('travel_course_likes', 'user_id',
               existing_type=sa.UUID(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.create_foreign_key(op.f('tourist_attractions_raw_data_id_fkey'), 'tourist_attractions', 'api_raw_data', ['raw_data_id'], ['id'])
    op.drop_index(op.f('ix_tourist_attractions_region_code'), table_name='tourist_attractions')
    op.drop_index(op.f('ix_tourist_attractions_raw_data_id'), table_name='tourist_attractions')
    op.drop_index(op.f('ix_tourist_attractions_content_id'), table_name='tourist_attractions')
    op.drop_index(op.f('ix_tourist_attractions_attraction_name'), table_name='tourist_attractions')
    op.drop_index('idx_tourist_attractions_region_category', table_name='tourist_attractions')
    op.create_index(op.f('idx_tourist_region_code'), 'tourist_attractions', ['region_code'], unique=False)
    op.create_index(op.f('idx_tourist_location'), 'tourist_attractions', ['latitude', 'longitude'], unique=False)
    op.create_index(op.f('idx_tourist_category'), 'tourist_attractions', ['category_code'], unique=False)
    op.create_index(op.f('idx_tourist_attractions_modifiedtime'), 'tourist_attractions', ['modifiedtime'], unique=False)
    op.create_index(op.f('idx_tourist_attractions_createdtime'), 'tourist_attractions', ['createdtime'], unique=False)
    op.create_index(op.f('idx_tourist_attractions_booktour'), 'tourist_attractions', ['booktour'], unique=False)
    op.create_index(op.f('idx_region_code'), 'tourist_attractions', ['region_code'], unique=False)
    op.create_index(op.f('idx_location'), 'tourist_attractions', ['latitude', 'longitude'], unique=False)
    op.create_index(op.f('idx_category'), 'tourist_attractions', ['category_code'], unique=False)
    op.alter_column('tourist_attractions', 'detail_additional_info',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment='부대시설/이용안내 등 추가 정보 (JSON)',
               existing_nullable=True)
    op.alter_column('tourist_attractions', 'detail_intro_info',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment='컨텐츠 타입별 세부 정보 (JSON)',
               existing_nullable=True)
    op.alter_column('tourist_attractions', 'mlevel',
               existing_type=sa.INTEGER(),
               comment='맵레벨',
               existing_nullable=True)
    op.alter_column('tourist_attractions', 'faxno',
               existing_type=sa.VARCHAR(length=50),
               comment='팩스번호',
               existing_nullable=True)
    op.alter_column('tourist_attractions', 'telname',
               existing_type=sa.VARCHAR(length=100),
               comment='전화번호명',
               existing_nullable=True)
    op.alter_column('tourist_attractions', 'modifiedtime',
               existing_type=sa.VARCHAR(length=14),
               comment='콘텐츠 최종 수정일 (YYYYMMDDHHMMSS)',
               existing_nullable=True)
    op.alter_column('tourist_attractions', 'createdtime',
               existing_type=sa.VARCHAR(length=14),
               comment='콘텐츠 최초 등록일 (YYYYMMDDHHMMSS)',
               existing_nullable=True)
    op.alter_column('tourist_attractions', 'booktour',
               existing_type=sa.String(length=1),
               type_=sa.CHAR(length=1),
               comment='교과서속여행지여부 (Y/N)',
               existing_nullable=True)
    op.alter_column('tourist_attractions', 'homepage',
               existing_type=sa.TEXT(),
               comment='홈페이지 URL',
               existing_nullable=True)
    op.alter_column('tourist_attractions', 'zipcode',
               existing_type=sa.VARCHAR(length=10),
               comment='우편번호',
               existing_nullable=True)
    op.add_column('shopping', sa.Column('sigungu_code', sa.VARCHAR(length=10), autoincrement=False, nullable=True))
    op.create_foreign_key(op.f('shopping_raw_data_id_fkey'), 'shopping', 'api_raw_data', ['raw_data_id'], ['id'])
    op.drop_index(op.f('ix_shopping_shop_name'), table_name='shopping')
    op.drop_index(op.f('ix_shopping_region_code'), table_name='shopping')
    op.drop_index(op.f('ix_shopping_raw_data_id'), table_name='shopping')
    op.drop_index(op.f('ix_shopping_content_id'), table_name='shopping')
    op.drop_index('idx_shopping_region_type', table_name='shopping')
    op.create_index(op.f('idx_shopping_type'), 'shopping', ['shop_type'], unique=False)
    op.create_index(op.f('idx_shopping_region'), 'shopping', ['region_code'], unique=False)
    op.create_index(op.f('idx_shopping_modifiedtime'), 'shopping', ['modifiedtime'], unique=False)
    op.create_index(op.f('idx_shopping_location'), 'shopping', ['latitude', 'longitude'], unique=False)
    op.create_index(op.f('idx_shopping_createdtime'), 'shopping', ['createdtime'], unique=False)
    op.create_index(op.f('idx_shopping_booktour'), 'shopping', ['booktour'], unique=False)
    op.alter_column('shopping', 'detail_additional_info',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment='부대시설/이용안내 등 추가 정보 (JSON)',
               existing_nullable=True)
    op.alter_column('shopping', 'detail_intro_info',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment='컨텐츠 타입별 세부 정보 (JSON)',
               existing_nullable=True)
    op.alter_column('shopping', 'mlevel',
               existing_type=sa.INTEGER(),
               comment='맵레벨',
               existing_nullable=True)
    op.alter_column('shopping', 'faxno',
               existing_type=sa.VARCHAR(length=50),
               comment='팩스번호',
               existing_nullable=True)
    op.alter_column('shopping', 'telname',
               existing_type=sa.VARCHAR(length=100),
               comment='전화번호명',
               existing_nullable=True)
    op.alter_column('shopping', 'modifiedtime',
               existing_type=sa.VARCHAR(length=14),
               comment='콘텐츠 최종 수정일 (YYYYMMDDHHMMSS)',
               existing_nullable=True)
    op.alter_column('shopping', 'createdtime',
               existing_type=sa.VARCHAR(length=14),
               comment='콘텐츠 최초 등록일 (YYYYMMDDHHMMSS)',
               existing_nullable=True)
    op.alter_column('shopping', 'booktour',
               existing_type=sa.String(length=1),
               type_=sa.CHAR(length=1),
               comment='교과서속여행지여부 (Y/N)',
               existing_nullable=True)
    op.alter_column('shopping', 'homepage',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(length=500),
               comment='홈페이지 URL',
               existing_nullable=True)
    op.alter_column('shopping', 'tel',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=500),
               existing_nullable=True)
    op.alter_column('shopping', 'zipcode',
               existing_type=sa.VARCHAR(length=10),
               comment='우편번호',
               existing_nullable=True)
    op.drop_index('idx_review_user_rating', table_name='reviews')
    op.drop_constraint(None, 'review_likes', type_='foreignkey')
    op.add_column('restaurants', sa.Column('booktour', sa.CHAR(length=1), autoincrement=False, nullable=True, comment='교과서속여행지여부 (Y/N)'))
    op.add_column('restaurants', sa.Column('mlevel', sa.INTEGER(), autoincrement=False, nullable=True, comment='맵레벨'))
    op.add_column('restaurants', sa.Column('modifiedtime', sa.VARCHAR(length=14), autoincrement=False, nullable=True, comment='콘텐츠 최종 수정일 (YYYYMMDDHHMMSS)'))
    op.add_column('restaurants', sa.Column('detail_additional_info', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='부대시설/이용안내 등 추가 정보 (JSON)'))
    op.add_column('restaurants', sa.Column('faxno', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='팩스번호'))
    op.add_column('restaurants', sa.Column('detail_intro_info', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='컨텐츠 타입별 세부 정보 (JSON)'))
    op.add_column('restaurants', sa.Column('telname', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='전화번호명'))
    op.add_column('restaurants', sa.Column('createdtime', sa.VARCHAR(length=14), autoincrement=False, nullable=True, comment='콘텐츠 최초 등록일 (YYYYMMDDHHMMSS)'))
    op.add_column('restaurants', sa.Column('sigungu_code', sa.VARCHAR(length=10), autoincrement=False, nullable=True))
    op.create_foreign_key(op.f('restaurants_raw_data_id_fkey'), 'restaurants', 'api_raw_data', ['raw_data_id'], ['id'])
    op.drop_index(op.f('ix_restaurants_restaurant_name'), table_name='restaurants')
    op.drop_index(op.f('ix_restaurants_raw_data_id'), table_name='restaurants')
    op.drop_index('idx_restaurants_region_cuisine', table_name='restaurants')
    op.create_index(op.f('idx_restaurants_modifiedtime'), 'restaurants', ['modifiedtime'], unique=False)
    op.create_index(op.f('idx_restaurants_createdtime'), 'restaurants', ['createdtime'], unique=False)
    op.create_index(op.f('idx_restaurants_booktour'), 'restaurants', ['booktour'], unique=False)
    op.create_index(op.f('idx_restaurant_region'), 'restaurants', ['region_code'], unique=False)
    op.create_index(op.f('idx_restaurant_cuisine'), 'restaurants', ['cuisine_type'], unique=False)
    op.alter_column('restaurants', 'data_quality_score',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=5, scale=2),
               existing_nullable=True)
    op.alter_column('restaurants', 'homepage',
               existing_type=sa.VARCHAR(length=500),
               comment='홈페이지 URL',
               existing_nullable=True)
    op.alter_column('restaurants', 'longitude',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=11, scale=8),
               existing_nullable=True)
    op.alter_column('restaurants', 'latitude',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=10, scale=8),
               existing_nullable=True)
    op.alter_column('restaurants', 'zipcode',
               existing_type=sa.VARCHAR(length=10),
               comment='우편번호',
               existing_nullable=True)
    op.add_column('regions', sa.Column('grid_x', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('regions', sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True))
    op.add_column('regions', sa.Column('region_name_en', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('regions', sa.Column('grid_y', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('regions', sa.Column('center_longitude', sa.NUMERIC(precision=11, scale=8), autoincrement=False, nullable=True))
    op.add_column('regions', sa.Column('administrative_code', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('regions', sa.Column('region_name_full', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('regions', sa.Column('boundary_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('regions', sa.Column('center_latitude', sa.NUMERIC(precision=10, scale=8), autoincrement=False, nullable=True))
    op.create_index(op.f('idx_region_level'), 'regions', ['region_level'], unique=False)
    op.create_index(op.f('idx_parent_region'), 'regions', ['parent_region_code'], unique=False)
    op.alter_column('regions', 'region_level',
               existing_type=sa.Integer(),
               type_=sa.SMALLINT(),
               nullable=False)
    op.alter_column('regions', 'longitude',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=11, scale=8),
               existing_nullable=True)
    op.alter_column('regions', 'latitude',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=10, scale=8),
               existing_nullable=True)
    op.create_table_comment(
        'pet_tour_info',
        '반려동물 동반여행 정보 (detailPetTour2 API)',
        existing_comment=None,
        schema=None
    )
    op.create_foreign_key(op.f('pet_tour_info_raw_data_id_fkey'), 'pet_tour_info', 'api_raw_data', ['raw_data_id'], ['id'], ondelete='SET NULL')
    op.drop_index(op.f('ix_pet_tour_info_raw_data_id'), table_name='pet_tour_info')
    op.drop_index(op.f('ix_pet_tour_info_id'), table_name='pet_tour_info')
    op.create_index(op.f('idx_pet_tour_info_sync_at'), 'pet_tour_info', ['last_sync_at'], unique=False)
    op.create_index(op.f('idx_pet_tour_info_location'), 'pet_tour_info', ['latitude', 'longitude'], unique=False)
    op.create_index(op.f('idx_pet_tour_info_area_codes'), 'pet_tour_info', ['area_code', 'sigungu_code'], unique=False)
    op.add_column('festivals_events', sa.Column('sigungu_code', sa.VARCHAR(length=10), autoincrement=False, nullable=True))
    op.create_foreign_key(op.f('festivals_events_raw_data_id_fkey'), 'festivals_events', 'api_raw_data', ['raw_data_id'], ['id'])
    op.drop_index(op.f('ix_festivals_events_region_code'), table_name='festivals_events')
    op.drop_index(op.f('ix_festivals_events_raw_data_id'), table_name='festivals_events')
    op.drop_index(op.f('ix_festivals_events_event_name'), table_name='festivals_events')
    op.drop_index(op.f('ix_festivals_events_content_id'), table_name='festivals_events')
    op.drop_index('idx_festivals_events_region_dates', table_name='festivals_events')
    op.create_index(op.f('idx_festivals_events_modifiedtime'), 'festivals_events', ['modifiedtime'], unique=False)
    op.create_index(op.f('idx_festivals_events_createdtime'), 'festivals_events', ['createdtime'], unique=False)
    op.create_index(op.f('idx_festivals_events_booktour'), 'festivals_events', ['booktour'], unique=False)
    op.create_index(op.f('idx_festival_region'), 'festivals_events', ['region_code'], unique=False)
    op.create_index(op.f('idx_festival_location'), 'festivals_events', ['latitude', 'longitude'], unique=False)
    op.create_index(op.f('idx_festival_dates'), 'festivals_events', ['event_start_date', 'event_end_date'], unique=False)
    op.create_index(op.f('idx_festival_category'), 'festivals_events', ['category_code'], unique=False)
    op.alter_column('festivals_events', 'detail_additional_info',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment='부대시설/이용안내 등 추가 정보 (JSON)',
               existing_nullable=True)
    op.alter_column('festivals_events', 'detail_intro_info',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment='컨텐츠 타입별 세부 정보 (JSON)',
               existing_nullable=True)
    op.alter_column('festivals_events', 'mlevel',
               existing_type=sa.INTEGER(),
               comment='맵레벨',
               existing_nullable=True)
    op.alter_column('festivals_events', 'faxno',
               existing_type=sa.VARCHAR(length=50),
               comment='팩스번호',
               existing_nullable=True)
    op.alter_column('festivals_events', 'telname',
               existing_type=sa.VARCHAR(length=100),
               comment='전화번호명',
               existing_nullable=True)
    op.alter_column('festivals_events', 'modifiedtime',
               existing_type=sa.VARCHAR(length=14),
               comment='콘텐츠 최종 수정일 (YYYYMMDDHHMMSS)',
               existing_nullable=True)
    op.alter_column('festivals_events', 'createdtime',
               existing_type=sa.VARCHAR(length=14),
               comment='콘텐츠 최초 등록일 (YYYYMMDDHHMMSS)',
               existing_nullable=True)
    op.alter_column('festivals_events', 'booktour',
               existing_type=sa.String(length=1),
               type_=sa.CHAR(length=1),
               comment='교과서속여행지여부 (Y/N)',
               existing_nullable=True)
    op.alter_column('festivals_events', 'homepage',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(length=500),
               comment='홈페이지 URL',
               existing_nullable=True)
    op.alter_column('festivals_events', 'tel',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=500),
               existing_nullable=True)
    op.alter_column('festivals_events', 'zipcode',
               existing_type=sa.VARCHAR(length=10),
               comment='우편번호',
               existing_nullable=True)
    op.drop_column('festivals_events', 'description')
    op.add_column('favorite_places', sa.Column('destination_id', sa.UUID(), autoincrement=False, nullable=True))
    op.add_column('cultural_facilities', sa.Column('sigungu_code', sa.VARCHAR(length=10), autoincrement=False, nullable=True))
    op.create_foreign_key(op.f('cultural_facilities_raw_data_id_fkey'), 'cultural_facilities', 'api_raw_data', ['raw_data_id'], ['id'])
    op.drop_index(op.f('ix_cultural_facilities_region_code'), table_name='cultural_facilities')
    op.drop_index(op.f('ix_cultural_facilities_raw_data_id'), table_name='cultural_facilities')
    op.drop_index(op.f('ix_cultural_facilities_facility_name'), table_name='cultural_facilities')
    op.drop_index(op.f('ix_cultural_facilities_content_id'), table_name='cultural_facilities')
    op.drop_index('idx_cultural_facilities_region_type', table_name='cultural_facilities')
    op.create_index(op.f('idx_cultural_type'), 'cultural_facilities', ['facility_type'], unique=False)
    op.create_index(op.f('idx_cultural_region'), 'cultural_facilities', ['region_code'], unique=False)
    op.create_index(op.f('idx_cultural_location'), 'cultural_facilities', ['latitude', 'longitude'], unique=False)
    op.create_index(op.f('idx_cultural_facilities_modifiedtime'), 'cultural_facilities', ['modifiedtime'], unique=False)
    op.create_index(op.f('idx_cultural_facilities_createdtime'), 'cultural_facilities', ['createdtime'], unique=False)
    op.create_index(op.f('idx_cultural_facilities_booktour'), 'cultural_facilities', ['booktour'], unique=False)
    op.create_index(op.f('idx_cultural_category'), 'cultural_facilities', ['category_code'], unique=False)
    op.alter_column('cultural_facilities', 'detail_additional_info',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment='부대시설/이용안내 등 추가 정보 (JSON)',
               existing_nullable=True)
    op.alter_column('cultural_facilities', 'detail_intro_info',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment='컨텐츠 타입별 세부 정보 (JSON)',
               existing_nullable=True)
    op.alter_column('cultural_facilities', 'mlevel',
               existing_type=sa.INTEGER(),
               comment='맵레벨',
               existing_nullable=True)
    op.alter_column('cultural_facilities', 'faxno',
               existing_type=sa.VARCHAR(length=50),
               comment='팩스번호',
               existing_nullable=True)
    op.alter_column('cultural_facilities', 'telname',
               existing_type=sa.VARCHAR(length=100),
               comment='전화번호명',
               existing_nullable=True)
    op.alter_column('cultural_facilities', 'modifiedtime',
               existing_type=sa.VARCHAR(length=14),
               comment='콘텐츠 최종 수정일 (YYYYMMDDHHMMSS)',
               existing_nullable=True)
    op.alter_column('cultural_facilities', 'createdtime',
               existing_type=sa.VARCHAR(length=14),
               comment='콘텐츠 최초 등록일 (YYYYMMDDHHMMSS)',
               existing_nullable=True)
    op.alter_column('cultural_facilities', 'booktour',
               existing_type=sa.String(length=1),
               type_=sa.CHAR(length=1),
               comment='교과서속여행지여부 (Y/N)',
               existing_nullable=True)
    op.alter_column('cultural_facilities', 'homepage',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(length=500),
               comment='홈페이지 URL',
               existing_nullable=True)
    op.alter_column('cultural_facilities', 'tel',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=500),
               existing_nullable=True)
    op.alter_column('cultural_facilities', 'zipcode',
               existing_type=sa.VARCHAR(length=10),
               comment='우편번호',
               existing_nullable=True)
    op.drop_index(op.f('ix_contact_id'), table_name='contact')
    op.alter_column('contact', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_column('contact', 'password')
    op.drop_column('contact', 'is_private')
    op.create_index(op.f('idx_parent_category'), 'category_codes', ['parent_category_code'], unique=False)
    op.create_index(op.f('idx_content_type'), 'category_codes', ['content_type_id'], unique=False)
    op.create_index(op.f('idx_category_level'), 'category_codes', ['category_level'], unique=False)
    op.alter_column('category_codes', 'category_level',
               existing_type=sa.Integer(),
               type_=sa.SMALLINT(),
               nullable=False)
    op.add_column('admins', sa.Column('is_superuser', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True))
    op.create_index(op.f('idx_admins_is_superuser'), 'admins', ['is_superuser'], unique=False)
    op.alter_column('admins', 'status',
               existing_type=sa.Enum('ACTIVE', 'INACTIVE', 'LOCKED', name='adminstatus'),
               type_=sa.VARCHAR(length=20),
               existing_nullable=True,
               existing_server_default=sa.text("'ACTIVE'::character varying"))
    op.add_column('accommodations', sa.Column('checkin_time', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('accommodations', sa.Column('public_pc', sa.VARCHAR(length=200), autoincrement=False, nullable=True))
    op.add_column('accommodations', sa.Column('last_sync_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True))
    op.add_column('accommodations', sa.Column('public_bath', sa.VARCHAR(length=200), autoincrement=False, nullable=True))
    op.add_column('accommodations', sa.Column('pickup_service', sa.VARCHAR(length=200), autoincrement=False, nullable=True))
    op.add_column('accommodations', sa.Column('karaoke', sa.VARCHAR(length=200), autoincrement=False, nullable=True))
    op.add_column('accommodations', sa.Column('zipcode', sa.VARCHAR(length=10), autoincrement=False, nullable=True, comment='우편번호'))
    op.add_column('accommodations', sa.Column('room_amenities', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('accommodations', sa.Column('mlevel', sa.INTEGER(), autoincrement=False, nullable=True, comment='맵레벨'))
    op.add_column('accommodations', sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True))
    op.add_column('accommodations', sa.Column('barbecue', sa.VARCHAR(length=200), autoincrement=False, nullable=True))
    op.add_column('accommodations', sa.Column('detail_address', sa.VARCHAR(length=300), autoincrement=False, nullable=True))
    op.add_column('accommodations', sa.Column('bicycle', sa.VARCHAR(length=200), autoincrement=False, nullable=True))
    op.add_column('accommodations', sa.Column('beauty', sa.VARCHAR(length=200), autoincrement=False, nullable=True))
    op.add_column('accommodations', sa.Column('room_count', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('accommodations', sa.Column('data_quality_score', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True))
    op.add_column('accommodations', sa.Column('processing_status', sa.VARCHAR(length=20), server_default=sa.text("'processed'::character varying"), autoincrement=False, nullable=True))
    op.add_column('accommodations', sa.Column('modifiedtime', sa.VARCHAR(length=14), autoincrement=False, nullable=True, comment='콘텐츠 최종 수정일 (YYYYMMDDHHMMSS)'))
    op.add_column('accommodations', sa.Column('detail_additional_info', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='부대시설/이용안내 등 추가 정보 (JSON)'))
    op.add_column('accommodations', sa.Column('sports', sa.VARCHAR(length=200), autoincrement=False, nullable=True))
    op.add_column('accommodations', sa.Column('faxno', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='팩스번호'))
    op.add_column('accommodations', sa.Column('detail_intro_info', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='컨텐츠 타입별 세부 정보 (JSON)'))
    op.add_column('accommodations', sa.Column('checkout_time', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('accommodations', sa.Column('createdtime', sa.VARCHAR(length=14), autoincrement=False, nullable=True, comment='콘텐츠 최초 등록일 (YYYYMMDDHHMMSS)'))
    op.add_column('accommodations', sa.Column('cooking', sa.VARCHAR(length=200), autoincrement=False, nullable=True))
    op.add_column('accommodations', sa.Column('sigungu_code', sa.VARCHAR(length=10), autoincrement=False, nullable=True))
    op.add_column('accommodations', sa.Column('first_image_small', sa.VARCHAR(length=500), autoincrement=False, nullable=True))
    op.add_column('accommodations', sa.Column('seminar', sa.VARCHAR(length=200), autoincrement=False, nullable=True))
    op.add_column('accommodations', sa.Column('overview', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('accommodations', sa.Column('booktour', sa.CHAR(length=1), autoincrement=False, nullable=True, comment='교과서속여행지여부 (Y/N)'))
    op.add_column('accommodations', sa.Column('sauna', sa.VARCHAR(length=200), autoincrement=False, nullable=True))
    op.add_column('accommodations', sa.Column('first_image', sa.VARCHAR(length=500), autoincrement=False, nullable=True))
    op.add_column('accommodations', sa.Column('fitness', sa.VARCHAR(length=200), autoincrement=False, nullable=True))
    op.add_column('accommodations', sa.Column('telname', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='전화번호명'))
    op.add_column('accommodations', sa.Column('campfire', sa.VARCHAR(length=200), autoincrement=False, nullable=True))
    op.add_column('accommodations', sa.Column('homepage', sa.VARCHAR(length=500), autoincrement=False, nullable=True, comment='홈페이지 URL'))
    op.create_foreign_key(op.f('accommodations_raw_data_id_fkey'), 'accommodations', 'api_raw_data', ['raw_data_id'], ['id'])
    op.drop_index(op.f('ix_accommodations_region_code'), table_name='accommodations')
    op.drop_index(op.f('ix_accommodations_raw_data_id'), table_name='accommodations')
    op.drop_index(op.f('ix_accommodations_content_id'), table_name='accommodations')
    op.drop_index('idx_accommodations_region_type', table_name='accommodations')
    op.create_index(op.f('idx_accommodations_modifiedtime'), 'accommodations', ['modifiedtime'], unique=False)
    op.create_index(op.f('idx_accommodations_createdtime'), 'accommodations', ['createdtime'], unique=False)
    op.create_index(op.f('idx_accommodations_booktour'), 'accommodations', ['booktour'], unique=False)
    op.create_index(op.f('idx_accommodation_type'), 'accommodations', ['accommodation_type'], unique=False)
    op.create_index(op.f('idx_accommodation_region'), 'accommodations', ['region_code'], unique=False)
    op.alter_column('accommodations', 'longitude',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=11, scale=8),
               existing_nullable=True)
    op.alter_column('accommodations', 'latitude',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=10, scale=8),
               existing_nullable=True)
    op.alter_column('accommodations', 'address',
               existing_type=sa.VARCHAR(length=300),
               nullable=True)
    op.alter_column('accommodations', 'accommodation_type',
               existing_type=sa.VARCHAR(length=50),
               nullable=True)
    op.create_table('content_detail_info',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('content_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('content_type_id', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('info_name', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('info_text', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('serial_num', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('raw_data_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['raw_data_id'], ['api_raw_data.id'], name=op.f('content_detail_info_raw_data_id_fkey'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['raw_data_id'], ['api_raw_data.id'], name=op.f('fk_content_detail_info_raw_data_id'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('content_detail_info_pkey')),
    sa.UniqueConstraint('content_id', 'serial_num', name=op.f('content_detail_info_unique_content_serial'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    comment='컨텐츠 상세 정보 (detailInfo2 API)'
    )
    op.create_index(op.f('idx_content_detail_info_serial'), 'content_detail_info', ['content_id', 'serial_num'], unique=False)
    op.create_index(op.f('idx_content_detail_info_content_type'), 'content_detail_info', ['content_type_id'], unique=False)
    op.create_index(op.f('idx_content_detail_info_content_id'), 'content_detail_info', ['content_id'], unique=False)
    op.create_table('area_based_sync_list',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('content_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('content_type_id', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('title', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('area_code', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('sigungu_code', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('cat1', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('cat2', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('cat3', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('addr1', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('addr2', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('zipcode', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('latitude', sa.NUMERIC(precision=10, scale=8), autoincrement=False, nullable=True),
    sa.Column('longitude', sa.NUMERIC(precision=11, scale=8), autoincrement=False, nullable=True),
    sa.Column('tel', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('first_image', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('first_image2', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_time', sa.VARCHAR(length=14), autoincrement=False, nullable=True),
    sa.Column('modified_time', sa.VARCHAR(length=14), autoincrement=False, nullable=True),
    sa.Column('book_tour', sa.CHAR(length=1), autoincrement=False, nullable=True),
    sa.Column('raw_data_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('data_quality_score', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('processing_status', sa.VARCHAR(length=20), server_default=sa.text("'processed'::character varying"), autoincrement=False, nullable=True),
    sa.Column('last_sync_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['raw_data_id'], ['api_raw_data.id'], name=op.f('area_based_sync_list_raw_data_id_fkey'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('area_based_sync_list_pkey')),
    sa.UniqueConstraint('content_id', name=op.f('area_based_sync_list_content_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    comment='지역기반 동기화 목록 (areaBasedSyncList2 API)'
    )
    op.create_index(op.f('idx_area_sync_list_modified'), 'area_based_sync_list', ['modified_time'], unique=False)
    op.create_index(op.f('idx_area_sync_list_location'), 'area_based_sync_list', ['latitude', 'longitude'], unique=False)
    op.create_index(op.f('idx_area_sync_list_content_id'), 'area_based_sync_list', ['content_id'], unique=False)
    op.create_index(op.f('idx_area_sync_list_area_codes'), 'area_based_sync_list', ['area_code', 'sigungu_code'], unique=False)
    op.create_table('cleanup_backup',
    sa.Column('region_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('region_code', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('region_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('region_name_full', sa.VARCHAR(length=150), autoincrement=False, nullable=True),
    sa.Column('region_name_en', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('parent_region_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('region_level', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('center_latitude', sa.NUMERIC(precision=10, scale=8), autoincrement=False, nullable=True),
    sa.Column('center_longitude', sa.NUMERIC(precision=11, scale=8), autoincrement=False, nullable=True),
    sa.Column('boundary_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('administrative_code', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('coordinate_transformations',
    sa.Column('transform_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('region_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('wgs84_latitude', sa.NUMERIC(precision=10, scale=8), autoincrement=False, nullable=False),
    sa.Column('wgs84_longitude', sa.NUMERIC(precision=11, scale=8), autoincrement=False, nullable=False),
    sa.Column('kma_grid_nx', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('kma_grid_ny', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('kma_station_code', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('transform_accuracy', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('calculation_method', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('is_verified', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint("calculation_method::text = ANY (ARRAY['lcc_projection'::character varying, 'approximate'::character varying, 'manual'::character varying, 'interpolation'::character varying, 'official_kma'::character varying]::text[])", name=op.f('chk_calculation_method')),
    sa.PrimaryKeyConstraint('transform_id', name=op.f('coordinate_transformations_pkey')),
    sa.UniqueConstraint('region_id', 'wgs84_latitude', 'wgs84_longitude', name=op.f('unique_coordinate_transform'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('city_weather_data',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('city_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('nx', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('ny', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('latitude', sa.NUMERIC(precision=10, scale=8), autoincrement=False, nullable=True),
    sa.Column('longitude', sa.NUMERIC(precision=11, scale=8), autoincrement=False, nullable=True),
    sa.Column('temperature', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('humidity', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('precipitation', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('wind_speed', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('wind_direction', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('sky_condition', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('precipitation_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('weather_description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('forecast_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('base_date', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('base_time', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('data_source', sa.VARCHAR(), server_default=sa.text("'KMA'::character varying"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('city_weather_data_pkey')),
    sa.UniqueConstraint('city_name', 'forecast_time', name=op.f('_city_forecast_time_uc'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_city_weather_data_id'), 'city_weather_data', ['id'], unique=False)
    op.create_index(op.f('ix_city_weather_data_city_name'), 'city_weather_data', ['city_name'], unique=False)
    op.create_table('classification_system_codes',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('code', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('parent_code', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('level_depth', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=True),
    sa.Column('sort_order', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('use_yn', sa.CHAR(length=1), server_default=sa.text("'Y'::bpchar"), autoincrement=False, nullable=True),
    sa.Column('raw_data_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('data_quality_score', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('processing_status', sa.VARCHAR(length=20), server_default=sa.text("'processed'::character varying"), autoincrement=False, nullable=True),
    sa.Column('last_sync_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['raw_data_id'], ['api_raw_data.id'], name=op.f('classification_system_codes_raw_data_id_fkey'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('classification_system_codes_pkey')),
    sa.UniqueConstraint('code', name=op.f('classification_system_codes_code_key'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    comment='분류체계 코드 정보 (lclsSystmCode2 API)'
    )
    op.create_index(op.f('idx_classification_codes_parent'), 'classification_system_codes', ['parent_code'], unique=False)
    op.create_index(op.f('idx_classification_codes_level'), 'classification_system_codes', ['level_depth'], unique=False)
    op.create_index(op.f('idx_classification_codes_code'), 'classification_system_codes', ['code'], unique=False)
    op.create_table('weather_forecasts',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('region_code', sa.VARCHAR(length=50), autoincrement=False, nullable=False, comment='지역 코드'),
    sa.Column('nx', sa.INTEGER(), autoincrement=False, nullable=False, comment='격자 X 좌표'),
    sa.Column('ny', sa.INTEGER(), autoincrement=False, nullable=False, comment='격자 Y 좌표'),
    sa.Column('temperature', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True, comment='기온'),
    sa.Column('humidity', sa.INTEGER(), autoincrement=False, nullable=True, comment='습도'),
    sa.Column('precipitation', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True, comment='강수량'),
    sa.Column('precipitation_probability', sa.INTEGER(), autoincrement=False, nullable=True, comment='강수 확률'),
    sa.Column('wind_speed', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True, comment='풍속'),
    sa.Column('wind_direction', sa.INTEGER(), autoincrement=False, nullable=True, comment='풍향'),
    sa.Column('sky_condition', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='하늘 상태'),
    sa.Column('weather_condition', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='날씨 상태'),
    sa.Column('base_date', sa.VARCHAR(length=8), autoincrement=False, nullable=True, comment='발표 일자'),
    sa.Column('base_time', sa.VARCHAR(length=4), autoincrement=False, nullable=True, comment='발표 시각'),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='생성 시간'),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='수정 시간'),
    sa.Column('forecast_type', sa.VARCHAR(length=10), server_default=sa.text("'short'::character varying"), autoincrement=False, nullable=True),
    sa.Column('data_quality_score', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('raw_data_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('last_sync_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('min_temp', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('max_temp', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('precipitation_prob', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('forecast_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('forecast_time_backup', sa.VARCHAR(length=4), autoincrement=False, nullable=True),
    sa.Column('forecast_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('weather_forecasts_pkey'))
    )
    op.create_index(op.f('idx_weather_forecasts_type_date'), 'weather_forecasts', ['forecast_type', 'forecast_date'], unique=False, postgresql_where='(forecast_type IS NOT NULL)')
    op.create_index(op.f('idx_weather_forecasts_region_date'), 'weather_forecasts', ['region_code', 'forecast_date'], unique=False)
    op.create_index(op.f('idx_weather_forecasts_raw_data_id'), 'weather_forecasts', ['raw_data_id'], unique=False)
    op.create_index(op.f('idx_weather_forecasts_quality'), 'weather_forecasts', ['region_code', 'forecast_date'], unique=False, postgresql_where='((min_temp IS NULL) OR (max_temp IS NULL) OR (weather_condition IS NULL))')
    op.create_index(op.f('idx_weather_forecasts_date_only'), 'weather_forecasts', ['forecast_date'], unique=False)
    op.create_index(op.f('idx_weather_forecasts_created_at'), 'weather_forecasts', ['created_at'], unique=False)
    op.create_index(op.f('idx_weather_forecasts_coordinates'), 'weather_forecasts', ['nx', 'ny'], unique=False)
    op.create_index(op.f('idx_weather_base_date'), 'weather_forecasts', ['base_date', 'base_time'], unique=False)
    op.create_table('apscheduler_jobs',
    sa.Column('id', sa.VARCHAR(length=191), autoincrement=False, nullable=False),
    sa.Column('next_run_time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('job_state', postgresql.BYTEA(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('apscheduler_jobs_pkey'))
    )
    op.create_index(op.f('ix_apscheduler_jobs_next_run_time'), 'apscheduler_jobs', ['next_run_time'], unique=False)
    op.create_table('region_api_mappings',
    sa.Column('mapping_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('region_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('api_provider', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('api_region_code', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('api_region_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('additional_codes', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('mapping_confidence', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint("api_provider::text = ANY (ARRAY['KTO'::character varying, 'KMA'::character varying, 'NAVER'::character varying, 'GOOGLE'::character varying]::text[])", name=op.f('chk_api_provider')),
    sa.CheckConstraint('mapping_confidence >= 0.00 AND mapping_confidence <= 1.00', name=op.f('chk_mapping_confidence')),
    sa.PrimaryKeyConstraint('mapping_id', name=op.f('region_api_mappings_pkey')),
    sa.UniqueConstraint('api_provider', 'api_region_code', 'region_id', name=op.f('unique_api_mapping'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('data_quality_checks',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('table_name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('check_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('total_records', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('missing_data_count', sa.BIGINT(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('duplicate_count', sa.BIGINT(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('quality_score', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('issues', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('data_quality_checks_pkey'))
    )
    op.create_index(op.f('idx_table_date'), 'data_quality_checks', ['table_name', 'check_date'], unique=False)
    op.create_index(op.f('idx_quality_table_date'), 'data_quality_checks', ['table_name', 'check_date'], unique=False)
    op.create_index(op.f('idx_quality_check_date'), 'data_quality_checks', ['check_date'], unique=False)
    op.create_table('travel_weather_scores',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('region_code', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('attraction_id', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('date_period', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('weather_score', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=False),
    sa.Column('temperature_score', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True),
    sa.Column('precipitation_score', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True),
    sa.Column('humidity_score', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True),
    sa.Column('overall_score', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('recommendation_level', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['attraction_id'], ['tourist_attractions.content_id'], name=op.f('travel_weather_scores_attraction_id_fkey')),
    sa.ForeignKeyConstraint(['region_code'], ['regions.region_code'], name=op.f('travel_weather_scores_region_code_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('travel_weather_scores_pkey')),
    sa.UniqueConstraint('region_code', 'date_period', name=op.f('unique_travel_weather_scores_region_date'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_travel_weather_scores_region_date'), 'travel_weather_scores', ['region_code', 'date_period'], unique=False)
    op.create_index(op.f('idx_scores_region_date'), 'travel_weather_scores', ['region_code', 'date_period'], unique=False)
    op.create_index(op.f('idx_scores_attraction_score'), 'travel_weather_scores', ['attraction_id', sa.literal_column('overall_score DESC')], unique=False)
    op.create_index(op.f('idx_region_date'), 'travel_weather_scores', ['region_code', 'date_period'], unique=False)
    op.create_index(op.f('idx_attraction_score'), 'travel_weather_scores', ['attraction_id', sa.literal_column('overall_score DESC')], unique=False)
    op.create_table('batch_job_logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('job_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('job_type', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('execution_context', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('processed_records', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('failed_records', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('start_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('end_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.CheckConstraint("status::text = ANY (ARRAY['pending'::character varying, 'running'::character varying, 'success'::character varying, 'failure'::character varying, 'cancelled'::character varying]::text[])", name=op.f('chk_batch_status')),
    sa.PrimaryKeyConstraint('id', name=op.f('batch_job_logs_pkey')),
    comment='배치 작업 실행 로그'
    )
    op.create_index(op.f('idx_batch_job_logs_status'), 'batch_job_logs', ['status'], unique=False)
    op.create_index(op.f('idx_batch_job_logs_job_name'), 'batch_job_logs', ['job_name'], unique=False)
    op.create_index(op.f('idx_batch_job_logs_created_at'), 'batch_job_logs', ['created_at'], unique=False)
    op.create_table('admin_activity_logs',
    sa.Column('log_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('admin_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('action', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('target_resource', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('severity', sa.VARCHAR(length=20), server_default=sa.text("'NORMAL'::character varying"), autoincrement=False, nullable=False),
    sa.Column('ip_address', sa.VARCHAR(length=45), server_default=sa.text("'127.0.0.1'::character varying"), autoincrement=False, nullable=False),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['admin_id'], ['admins.admin_id'], name=op.f('fk_admin_activity_logs_admin_id'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('log_id', name=op.f('admin_activity_logs_pkey'))
    )
    op.create_index(op.f('idx_admin_activity_logs_severity_date'), 'admin_activity_logs', ['severity', sa.literal_column('created_at DESC')], unique=False)
    op.create_index(op.f('idx_admin_activity_logs_severity'), 'admin_activity_logs', ['severity'], unique=False)
    op.create_index(op.f('idx_admin_activity_logs_created_at'), 'admin_activity_logs', ['created_at'], unique=False)
    op.create_index(op.f('idx_admin_activity_logs_admin_id'), 'admin_activity_logs', ['admin_id'], unique=False)
    op.create_index(op.f('idx_admin_activity_logs_admin_date'), 'admin_activity_logs', ['admin_id', sa.literal_column('created_at DESC')], unique=False)
    op.create_index(op.f('idx_admin_activity_logs_action'), 'admin_activity_logs', ['action'], unique=False)
    op.create_table('kto_api_metadata',
    sa.Column('raw_data_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('content_type_id', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('area_code', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('sigungu_code', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('total_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('page_no', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('num_of_rows', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('sync_batch_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['raw_data_id'], ['api_raw_data.id'], name=op.f('kto_api_metadata_raw_data_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('raw_data_id', name=op.f('kto_api_metadata_pkey')),
    comment='KTO API 호출 메타데이터'
    )
    op.create_table('leisure_sports',
    sa.Column('content_id', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('region_code', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('sigungu_code', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('facility_name', sa.VARCHAR(length=300), autoincrement=False, nullable=False),
    sa.Column('category_code', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('sub_category_code', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('address', sa.VARCHAR(length=300), autoincrement=False, nullable=True),
    sa.Column('detail_address', sa.VARCHAR(length=300), autoincrement=False, nullable=True),
    sa.Column('latitude', sa.NUMERIC(precision=10, scale=8), autoincrement=False, nullable=True),
    sa.Column('longitude', sa.NUMERIC(precision=11, scale=8), autoincrement=False, nullable=True),
    sa.Column('zipcode', sa.VARCHAR(length=10), autoincrement=False, nullable=True, comment='우편번호'),
    sa.Column('tel', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('homepage', sa.VARCHAR(length=500), autoincrement=False, nullable=True, comment='홈페이지 URL'),
    sa.Column('overview', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('first_image', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('first_image_small', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('sports_type', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('reservation_info', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('operating_hours', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('admission_fee', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('parking_info', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('rental_info', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('capacity', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('raw_data_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('last_sync_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('data_quality_score', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('processing_status', sa.VARCHAR(length=20), server_default=sa.text("'processed'::character varying"), autoincrement=False, nullable=True),
    sa.Column('booktour', sa.CHAR(length=1), autoincrement=False, nullable=True, comment='교과서속여행지여부 (Y/N)'),
    sa.Column('createdtime', sa.VARCHAR(length=14), autoincrement=False, nullable=True, comment='콘텐츠 최초 등록일 (YYYYMMDDHHMMSS)'),
    sa.Column('modifiedtime', sa.VARCHAR(length=14), autoincrement=False, nullable=True, comment='콘텐츠 최종 수정일 (YYYYMMDDHHMMSS)'),
    sa.Column('telname', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='전화번호명'),
    sa.Column('faxno', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='팩스번호'),
    sa.Column('mlevel', sa.INTEGER(), autoincrement=False, nullable=True, comment='맵레벨'),
    sa.Column('detail_intro_info', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='컨텐츠 타입별 세부 정보 (JSON)'),
    sa.Column('detail_additional_info', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='부대시설/이용안내 등 추가 정보 (JSON)'),
    sa.ForeignKeyConstraint(['raw_data_id'], ['api_raw_data.id'], name=op.f('leisure_sports_raw_data_id_fkey')),
    sa.ForeignKeyConstraint(['region_code'], ['regions.region_code'], name=op.f('leisure_sports_region_code_fkey')),
    sa.PrimaryKeyConstraint('content_id', name=op.f('leisure_sports_pkey'))
    )
    op.create_index(op.f('idx_leisure_type'), 'leisure_sports', ['sports_type'], unique=False)
    op.create_index(op.f('idx_leisure_sports_modifiedtime'), 'leisure_sports', ['modifiedtime'], unique=False)
    op.create_index(op.f('idx_leisure_sports_createdtime'), 'leisure_sports', ['createdtime'], unique=False)
    op.create_index(op.f('idx_leisure_sports_booktour'), 'leisure_sports', ['booktour'], unique=False)
    op.create_index(op.f('idx_leisure_region'), 'leisure_sports', ['region_code'], unique=False)
    op.create_index(op.f('idx_leisure_location'), 'leisure_sports', ['latitude', 'longitude'], unique=False)
    op.create_table('region_sync_logs',
    sa.Column('log_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('sync_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('sync_batch_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('api_provider', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('processed_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('created_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('updated_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('error_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('sync_status', sa.VARCHAR(length=20), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('error_details', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.CheckConstraint("sync_status::text = ANY (ARRAY['pending'::character varying, 'running'::character varying, 'success'::character varying, 'failure'::character varying, 'partial'::character varying]::text[])", name=op.f('chk_sync_status')),
    sa.CheckConstraint("sync_type::text = ANY (ARRAY['kto_sync'::character varying, 'kma_sync'::character varying, 'mapping_sync'::character varying, 'coordinate_sync'::character varying]::text[])", name=op.f('chk_sync_type')),
    sa.PrimaryKeyConstraint('log_id', name=op.f('region_sync_logs_pkey'))
    )
    op.create_table('data_transformation_logs',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('raw_data_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('target_table', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('transformation_rule', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('input_record_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('output_record_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('error_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('transformation_time_ms', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('error_details', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('quality_score', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.CheckConstraint("status::text = ANY (ARRAY['pending'::character varying, 'processing'::character varying, 'success'::character varying, 'partial_failure'::character varying, 'failure'::character varying]::text[])", name=op.f('chk_transformation_status')),
    sa.ForeignKeyConstraint(['raw_data_id'], ['api_raw_data.id'], name=op.f('data_transformation_logs_raw_data_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('data_transformation_logs_pkey')),
    comment='데이터 변환 과정 로그'
    )
    op.create_index(op.f('idx_transformation_logs_target_table'), 'data_transformation_logs', ['target_table'], unique=False)
    op.create_index(op.f('idx_transformation_logs_status'), 'data_transformation_logs', ['status'], unique=False)
    op.create_index(op.f('idx_transformation_logs_created_at'), 'data_transformation_logs', ['created_at'], unique=False)
    op.create_table('data_quality_thresholds',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('table_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('completeness_threshold', sa.NUMERIC(precision=3, scale=2), server_default=sa.text('0.90'), autoincrement=False, nullable=True),
    sa.Column('validity_threshold', sa.NUMERIC(precision=3, scale=2), server_default=sa.text('0.95'), autoincrement=False, nullable=True),
    sa.Column('consistency_threshold', sa.NUMERIC(precision=3, scale=2), server_default=sa.text('0.99'), autoincrement=False, nullable=True),
    sa.Column('overall_threshold', sa.NUMERIC(precision=3, scale=2), server_default=sa.text('0.85'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('data_quality_thresholds_pkey')),
    sa.UniqueConstraint('table_name', name=op.f('data_quality_thresholds_table_name_key'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    comment='데이터 품질 임계값 설정'
    )
    op.create_table('api_raw_data',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('api_provider', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('endpoint', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('request_method', sa.VARCHAR(length=10), server_default=sa.text("'GET'::character varying"), autoincrement=False, nullable=True),
    sa.Column('request_params', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('request_headers', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('response_status', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('raw_response', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('response_size', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('request_duration', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('api_key_hash', sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_archived', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('file_path', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.CheckConstraint("api_provider::text = ANY (ARRAY['KTO'::character varying, 'KMA'::character varying, 'GOOGLE'::character varying, 'NAVER'::character varying, 'WEATHER'::character varying]::text[])", name='chk_api_provider'),
    sa.CheckConstraint('response_status >= 100 AND response_status < 600', name='chk_response_status'),
    sa.PrimaryKeyConstraint('id', name='api_raw_data_pkey'),
    comment='외부 API 원본 응답 데이터 저장',
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('idx_api_raw_data_provider_endpoint'), 'api_raw_data', ['api_provider', 'endpoint'], unique=False)
    op.create_index(op.f('idx_api_raw_data_expires_at'), 'api_raw_data', ['expires_at'], unique=False)
    op.create_index(op.f('idx_api_raw_data_created_at'), 'api_raw_data', ['created_at'], unique=False)
    op.create_index(op.f('idx_api_raw_data_archived'), 'api_raw_data', ['is_archived'], unique=False)
    op.create_table('content_images',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('content_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('content_type_id', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('img_name', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('origin_img_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('small_image_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('serial_num', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('cpyrht_div_cd', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('img_size', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('img_width', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('img_height', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('raw_data_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('data_quality_score', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('processing_status', sa.VARCHAR(length=20), server_default=sa.text("'processed'::character varying"), autoincrement=False, nullable=True),
    sa.Column('last_sync_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['raw_data_id'], ['api_raw_data.id'], name=op.f('content_images_raw_data_id_fkey'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['raw_data_id'], ['api_raw_data.id'], name=op.f('fk_content_images_raw_data_id'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('content_images_pkey')),
    sa.UniqueConstraint('content_id', 'serial_num', name=op.f('content_images_unique_content_serial'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    comment='컨텐츠 이미지 정보 (detailImage2 API)'
    )
    op.create_index(op.f('idx_content_images_sync_at'), 'content_images', ['last_sync_at'], unique=False)
    op.create_index(op.f('idx_content_images_serial'), 'content_images', ['content_id', 'serial_num'], unique=False)
    op.create_index(op.f('idx_content_images_content_type'), 'content_images', ['content_type_id'], unique=False)
    op.create_index(op.f('idx_content_images_content_id'), 'content_images', ['content_id'], unique=False)
    op.create_table('kma_api_metadata',
    sa.Column('raw_data_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('base_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('base_time', sa.VARCHAR(length=4), autoincrement=False, nullable=True),
    sa.Column('nx', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('ny', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('forecast_type', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('region_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint("forecast_type::text = ANY (ARRAY['ultra_srt_ncst'::character varying, 'ultra_srt_fcst'::character varying, 'vilage_fcst'::character varying]::text[])", name=op.f('chk_forecast_type')),
    sa.ForeignKeyConstraint(['raw_data_id'], ['api_raw_data.id'], name=op.f('kma_api_metadata_raw_data_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('raw_data_id', name=op.f('kma_api_metadata_pkey')),
    comment='KMA API 호출 메타데이터'
    )
    op.drop_index(op.f('ix_unified_regions_region_id'), table_name='unified_regions')
    op.drop_index(op.f('ix_unified_regions_region_code'), table_name='unified_regions')
    op.drop_index(op.f('ix_unified_regions_parent_region_id'), table_name='unified_regions')
    op.drop_index('idx_unified_regions_code_level', table_name='unified_regions')
    op.drop_table('unified_regions')
    # ### end Alembic commands ###
