"""Initial migration based on ERD

Revision ID: 6a40c75dcc6a
Revises: 
Create Date: 2025-06-30 14:41:42.059768

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '6a40c75dcc6a'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_air_quality_alerts_city'), table_name='air_quality_alerts')
    op.drop_index(op.f('ix_air_quality_alerts_id'), table_name='air_quality_alerts')
    op.drop_index(op.f('ix_air_quality_alerts_user_id'), table_name='air_quality_alerts')
    op.drop_table('air_quality_alerts')
    op.drop_index(op.f('ix_restaurants_category'), table_name='restaurants')
    op.drop_index(op.f('ix_restaurants_city'), table_name='restaurants')
    op.drop_index(op.f('ix_restaurants_id'), table_name='restaurants')
    op.drop_index(op.f('ix_restaurants_name'), table_name='restaurants')
    op.drop_index(op.f('ix_restaurants_region'), table_name='restaurants')
    op.drop_table('restaurants')
    op.drop_index(op.f('ix_air_quality_health_profiles_id'), table_name='air_quality_health_profiles')
    op.drop_index(op.f('ix_air_quality_health_profiles_user_id'), table_name='air_quality_health_profiles')
    op.drop_table('air_quality_health_profiles')
    op.drop_index(op.f('ix_air_quality_favorites_city'), table_name='air_quality_favorites')
    op.drop_index(op.f('ix_air_quality_favorites_id'), table_name='air_quality_favorites')
    op.drop_index(op.f('ix_air_quality_favorites_user_id'), table_name='air_quality_favorites')
    op.drop_table('air_quality_favorites')
    op.drop_index(op.f('ix_email_verifications_email'), table_name='email_verifications')
    op.drop_index(op.f('ix_email_verifications_id'), table_name='email_verifications')
    op.drop_table('email_verifications')
    op.drop_index(op.f('ix_transportations_city'), table_name='transportations')
    op.drop_index(op.f('ix_transportations_id'), table_name='transportations')
    op.drop_index(op.f('ix_transportations_name'), table_name='transportations')
    op.drop_index(op.f('ix_transportations_region'), table_name='transportations')
    op.drop_index(op.f('ix_transportations_type'), table_name='transportations')
    op.drop_table('transportations')
    op.drop_index(op.f('ix_accommodations_city'), table_name='accommodations')
    op.drop_index(op.f('ix_accommodations_id'), table_name='accommodations')
    op.drop_index(op.f('ix_accommodations_name'), table_name='accommodations')
    op.drop_index(op.f('ix_accommodations_region'), table_name='accommodations')
    op.drop_index(op.f('ix_accommodations_type'), table_name='accommodations')
    op.drop_table('accommodations')
    op.drop_index(op.f('ix_city_info_city'), table_name='city_info')
    op.drop_index(op.f('ix_city_info_id'), table_name='city_info')
    op.drop_index(op.f('ix_city_info_region'), table_name='city_info')
    op.drop_table('city_info')
    op.drop_index(op.f('ix_air_quality_records_city'), table_name='air_quality_records')
    op.drop_index(op.f('ix_air_quality_records_id'), table_name='air_quality_records')
    op.drop_index(op.f('ix_air_quality_records_user_id'), table_name='air_quality_records')
    op.drop_table('air_quality_records')
    op.drop_index(op.f('ix_favorite_places_city'), table_name='favorite_places')
    op.drop_index(op.f('ix_favorite_places_id'), table_name='favorite_places')
    op.drop_index(op.f('ix_favorite_places_user_id'), table_name='favorite_places')
    op.drop_table('favorite_places')
    op.alter_column('admin_roles', 'assigned_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_index(op.f('ix_admin_roles_admin_id'), table_name='admin_roles')
    op.drop_index(op.f('ix_admin_roles_id'), table_name='admin_roles')
    op.drop_index(op.f('ix_admin_roles_role_id'), table_name='admin_roles')
    op.create_foreign_key(None, 'admin_roles', 'roles', ['role_id'], ['role_id'])
    op.create_foreign_key(None, 'admin_roles', 'admins', ['admin_id'], ['admin_id'])
    op.drop_column('admin_roles', 'id')
    op.add_column('admins', sa.Column('admin_id', sa.Integer(), nullable=False))
    op.alter_column('admins', 'name',
               existing_type=sa.VARCHAR(length=100),
               nullable=True)
    op.alter_column('admins', 'status',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.Enum('ACTIVE', 'INACTIVE', 'LOCKED', name='adminstatus'),
               existing_nullable=True)
    op.alter_column('admins', 'last_login_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('admins', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_constraint(op.f('admins_email_key'), 'admins', type_='unique')
    op.drop_index(op.f('ix_admins_id'), table_name='admins')
    op.create_index(op.f('ix_admins_admin_id'), 'admins', ['admin_id'], unique=False)
    op.create_index(op.f('ix_admins_email'), 'admins', ['email'], unique=True)
    op.drop_column('admins', 'failed_login_attempts')
    op.drop_column('admins', 'login_count')
    op.drop_column('admins', 'updated_at')
    op.drop_column('admins', 'id')
    op.add_column('destinations', sa.Column('destination_id', sa.UUID(), nullable=False))
    op.add_column('destinations', sa.Column('amenities', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.alter_column('destinations', 'image_url',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('destinations', 'rating',
               existing_type=sa.NUMERIC(precision=3, scale=1),
               type_=sa.Float(),
               existing_nullable=True)
    op.alter_column('destinations', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_index(op.f('ix_destinations_id'), table_name='destinations')
    op.create_index(op.f('ix_destinations_destination_id'), 'destinations', ['destination_id'], unique=False)
    op.drop_column('destinations', 'description')
    op.drop_column('destinations', 'id')
    op.drop_column('destinations', 'season_preferences')
    op.drop_column('destinations', 'gallery_urls')
    op.drop_column('destinations', 'weather_tags')
    op.drop_column('destinations', 'updated_at')
    op.drop_column('destinations', 'activity_tags')
    op.drop_column('destinations', 'status')
    op.drop_column('destinations', 'address')
    op.drop_column('destinations', 'popularity_score')
    op.add_column('reviews', sa.Column('review_id', sa.UUID(), nullable=False))
    op.add_column('reviews', sa.Column('destination_id', sa.UUID(), nullable=False))
    op.add_column('reviews', sa.Column('travel_plan_id', sa.UUID(), nullable=True))
    op.add_column('reviews', sa.Column('content', sa.Text(), nullable=True))
    op.add_column('reviews', sa.Column('photos', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.alter_column('reviews', 'user_id',
               existing_type=sa.INTEGER(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('reviews', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_index(op.f('ix_reviews_id'), table_name='reviews')
    op.drop_index(op.f('ix_reviews_place_id'), table_name='reviews')
    op.drop_index(op.f('ix_reviews_user_id'), table_name='reviews')
    op.create_index(op.f('ix_reviews_review_id'), 'reviews', ['review_id'], unique=False)
    op.create_foreign_key(None, 'reviews', 'destinations', ['destination_id'], ['destination_id'])
    op.create_foreign_key(None, 'reviews', 'users', ['user_id'], ['user_id'])
    op.create_foreign_key(None, 'reviews', 'travel_plans', ['travel_plan_id'], ['plan_id'])
    op.drop_column('reviews', 'id')
    op.drop_column('reviews', 'place_id')
    op.drop_column('reviews', 'place_type')
    op.drop_column('reviews', 'updated_at')
    op.drop_column('reviews', 'comment')
    op.add_column('roles', sa.Column('role_id', sa.Integer(), nullable=False))
    op.alter_column('roles', 'display_name',
               existing_type=sa.VARCHAR(length=100),
               nullable=True)
    op.drop_index(op.f('ix_roles_id'), table_name='roles')
    op.create_index(op.f('ix_roles_role_id'), 'roles', ['role_id'], unique=False)
    op.drop_column('roles', 'created_at')
    op.drop_column('roles', 'id')
    op.add_column('system_logs', sa.Column('log_id', sa.Integer(), nullable=False))
    op.alter_column('system_logs', 'context',
               existing_type=sa.TEXT(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('system_logs', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_index(op.f('ix_system_logs_id'), table_name='system_logs')
    op.create_index(op.f('ix_system_logs_log_id'), 'system_logs', ['log_id'], unique=False)
    op.drop_column('system_logs', 'id')
    op.add_column('travel_plans', sa.Column('plan_id', sa.UUID(), nullable=False))
    op.alter_column('travel_plans', 'start_date',
               existing_type=sa.VARCHAR(),
               type_=sa.Date(),
               nullable=True)
    op.alter_column('travel_plans', 'end_date',
               existing_type=sa.VARCHAR(),
               type_=sa.Date(),
               nullable=True)
    op.alter_column('travel_plans', 'status',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.Enum('PLANNING', 'CONFIRMED', 'IN_PROGRESS', 'COMPLETED', 'CANCELLED', name='travelplanstatus'),
               existing_nullable=True)
    op.alter_column('travel_plans', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_index(op.f('ix_travel_plans_id'), table_name='travel_plans')
    op.drop_index(op.f('ix_travel_plans_user_id'), table_name='travel_plans')
    op.create_index(op.f('ix_travel_plans_plan_id'), 'travel_plans', ['plan_id'], unique=False)
    op.create_foreign_key(None, 'travel_plans', 'users', ['user_id'], ['user_id'])
    op.drop_column('travel_plans', 'transportation')
    op.drop_column('travel_plans', 'participants')
    op.drop_column('travel_plans', 'updated_at')
    op.drop_column('travel_plans', 'id')
    op.add_column('user_activity_logs', sa.Column('log_id', sa.Integer(), nullable=False))
    op.alter_column('user_activity_logs', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_index(op.f('ix_user_activity_logs_id'), table_name='user_activity_logs')
    op.drop_index(op.f('ix_user_activity_logs_user_id'), table_name='user_activity_logs')
    op.create_index(op.f('ix_user_activity_logs_log_id'), 'user_activity_logs', ['log_id'], unique=False)
    op.create_foreign_key(None, 'user_activity_logs', 'users', ['user_id'], ['user_id'])
    op.drop_column('user_activity_logs', 'id')
    op.add_column('users', sa.Column('user_id', sa.UUID(), nullable=False))
    op.add_column('users', sa.Column('profile_image', sa.String(), nullable=True))
    op.add_column('users', sa.Column('account_type', sa.Enum('USER', 'ADMIN', name='accounttype'), nullable=True))
    op.alter_column('users', 'password_hash',
               existing_type=sa.VARCHAR(length=255),
               nullable=False)
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_index(op.f('ix_users_google_id'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.create_index(op.f('ix_users_user_id'), 'users', ['user_id'], unique=False)
    op.drop_column('users', 'auth_provider')
    op.drop_column('users', 'is_active')
    op.drop_column('users', 'id')
    op.drop_column('users', 'email_verified_at')
    op.drop_column('users', 'is_verified')
    op.drop_column('users', 'birth_year')
    op.drop_column('users', 'profile_image_url')
    op.drop_column('users', 'role')
    op.drop_column('users', 'notification_settings')
    op.drop_column('users', 'region')
    op.drop_column('users', 'status')
    op.drop_column('users', 'login_count')
    op.drop_column('users', 'last_login_at')
    op.drop_column('users', 'google_id')
    op.add_column('weather_data', sa.Column('weather_id', sa.UUID(), nullable=False))
    op.alter_column('weather_data', 'forecast_date',
               existing_type=sa.VARCHAR(),
               type_=sa.Date(),
               existing_nullable=False)
    op.alter_column('weather_data', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_index(op.f('ix_weather_data_destination_id'), table_name='weather_data')
    op.drop_index(op.f('ix_weather_data_id'), table_name='weather_data')
    op.create_index(op.f('ix_weather_data_weather_id'), 'weather_data', ['weather_id'], unique=False)
    op.create_foreign_key(None, 'weather_data', 'destinations', ['destination_id'], ['destination_id'])
    op.drop_column('weather_data', 'precipitation_prob')
    op.drop_column('weather_data', 'uv_index')
    op.drop_column('weather_data', 'id')
    op.drop_column('weather_data', 'wind_speed')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('weather_data', sa.Column('wind_speed', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('weather_data', sa.Column('id', sa.UUID(), autoincrement=False, nullable=False))
    op.add_column('weather_data', sa.Column('uv_index', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('weather_data', sa.Column('precipitation_prob', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'weather_data', type_='foreignkey')
    op.drop_index(op.f('ix_weather_data_weather_id'), table_name='weather_data')
    op.create_index(op.f('ix_weather_data_id'), 'weather_data', ['id'], unique=False)
    op.create_index(op.f('ix_weather_data_destination_id'), 'weather_data', ['destination_id'], unique=False)
    op.alter_column('weather_data', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('weather_data', 'forecast_date',
               existing_type=sa.Date(),
               type_=sa.VARCHAR(),
               existing_nullable=False)
    op.drop_column('weather_data', 'weather_id')
    op.add_column('users', sa.Column('google_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('last_login_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('login_count', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('region', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('notification_settings', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('role', postgresql.ENUM('USER', 'ADMIN', 'MODERATOR', name='userrole'), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('profile_image_url', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('birth_year', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('is_verified', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('email_verified_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('id', sa.UUID(), autoincrement=False, nullable=False))
    op.add_column('users', sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('auth_provider', sa.VARCHAR(length=20), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_users_user_id'), table_name='users')
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_google_id'), 'users', ['google_id'], unique=True)
    op.alter_column('users', 'updated_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'password_hash',
               existing_type=sa.VARCHAR(length=255),
               nullable=True)
    op.drop_column('users', 'account_type')
    op.drop_column('users', 'profile_image')
    op.drop_column('users', 'user_id')
    op.add_column('user_activity_logs', sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False))
    op.drop_constraint(None, 'user_activity_logs', type_='foreignkey')
    op.drop_index(op.f('ix_user_activity_logs_log_id'), table_name='user_activity_logs')
    op.create_index(op.f('ix_user_activity_logs_user_id'), 'user_activity_logs', ['user_id'], unique=False)
    op.create_index(op.f('ix_user_activity_logs_id'), 'user_activity_logs', ['id'], unique=False)
    op.alter_column('user_activity_logs', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_column('user_activity_logs', 'log_id')
    op.add_column('travel_plans', sa.Column('id', sa.UUID(), autoincrement=False, nullable=False))
    op.add_column('travel_plans', sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True))
    op.add_column('travel_plans', sa.Column('participants', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('travel_plans', sa.Column('transportation', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'travel_plans', type_='foreignkey')
    op.drop_index(op.f('ix_travel_plans_plan_id'), table_name='travel_plans')
    op.create_index(op.f('ix_travel_plans_user_id'), 'travel_plans', ['user_id'], unique=False)
    op.create_index(op.f('ix_travel_plans_id'), 'travel_plans', ['id'], unique=False)
    op.alter_column('travel_plans', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('travel_plans', 'status',
               existing_type=sa.Enum('PLANNING', 'CONFIRMED', 'IN_PROGRESS', 'COMPLETED', 'CANCELLED', name='travelplanstatus'),
               type_=sa.VARCHAR(length=20),
               existing_nullable=True)
    op.alter_column('travel_plans', 'end_date',
               existing_type=sa.Date(),
               type_=sa.VARCHAR(),
               nullable=False)
    op.alter_column('travel_plans', 'start_date',
               existing_type=sa.Date(),
               type_=sa.VARCHAR(),
               nullable=False)
    op.drop_column('travel_plans', 'plan_id')
    op.add_column('system_logs', sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False))
    op.drop_index(op.f('ix_system_logs_log_id'), table_name='system_logs')
    op.create_index(op.f('ix_system_logs_id'), 'system_logs', ['id'], unique=False)
    op.alter_column('system_logs', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('system_logs', 'context',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.drop_column('system_logs', 'log_id')
    op.add_column('roles', sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False))
    op.add_column('roles', sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_roles_role_id'), table_name='roles')
    op.create_index(op.f('ix_roles_id'), 'roles', ['id'], unique=False)
    op.alter_column('roles', 'display_name',
               existing_type=sa.VARCHAR(length=100),
               nullable=False)
    op.drop_column('roles', 'role_id')
    op.add_column('reviews', sa.Column('comment', sa.TEXT(), autoincrement=False, nullable=False))
    op.add_column('reviews', sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('reviews', sa.Column('place_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False))
    op.add_column('reviews', sa.Column('place_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('reviews', sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False))
    op.drop_constraint(None, 'reviews', type_='foreignkey')
    op.drop_constraint(None, 'reviews', type_='foreignkey')
    op.drop_constraint(None, 'reviews', type_='foreignkey')
    op.drop_index(op.f('ix_reviews_review_id'), table_name='reviews')
    op.create_index(op.f('ix_reviews_user_id'), 'reviews', ['user_id'], unique=False)
    op.create_index(op.f('ix_reviews_place_id'), 'reviews', ['place_id'], unique=False)
    op.create_index(op.f('ix_reviews_id'), 'reviews', ['id'], unique=False)
    op.alter_column('reviews', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('reviews', 'user_id',
               existing_type=sa.UUID(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.drop_column('reviews', 'photos')
    op.drop_column('reviews', 'content')
    op.drop_column('reviews', 'travel_plan_id')
    op.drop_column('reviews', 'destination_id')
    op.drop_column('reviews', 'review_id')
    op.add_column('destinations', sa.Column('popularity_score', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True))
    op.add_column('destinations', sa.Column('address', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('destinations', sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True))
    op.add_column('destinations', sa.Column('activity_tags', postgresql.ARRAY(sa.VARCHAR(length=50)), autoincrement=False, nullable=True))
    op.add_column('destinations', sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True))
    op.add_column('destinations', sa.Column('weather_tags', postgresql.ARRAY(sa.VARCHAR(length=50)), autoincrement=False, nullable=True))
    op.add_column('destinations', sa.Column('gallery_urls', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True))
    op.add_column('destinations', sa.Column('season_preferences', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('destinations', sa.Column('id', sa.UUID(), autoincrement=False, nullable=False))
    op.add_column('destinations', sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_destinations_destination_id'), table_name='destinations')
    op.create_index(op.f('ix_destinations_id'), 'destinations', ['id'], unique=False)
    op.alter_column('destinations', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('destinations', 'rating',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=3, scale=1),
               existing_nullable=True)
    op.alter_column('destinations', 'image_url',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.drop_column('destinations', 'amenities')
    op.drop_column('destinations', 'destination_id')
    op.add_column('admins', sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False))
    op.add_column('admins', sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('admins', sa.Column('login_count', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('admins', sa.Column('failed_login_attempts', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_admins_email'), table_name='admins')
    op.drop_index(op.f('ix_admins_admin_id'), table_name='admins')
    op.create_index(op.f('ix_admins_id'), 'admins', ['id'], unique=False)
    op.create_unique_constraint(op.f('admins_email_key'), 'admins', ['email'], postgresql_nulls_not_distinct=False)
    op.alter_column('admins', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('admins', 'last_login_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('admins', 'status',
               existing_type=sa.Enum('ACTIVE', 'INACTIVE', 'LOCKED', name='adminstatus'),
               type_=sa.VARCHAR(length=20),
               existing_nullable=True)
    op.alter_column('admins', 'name',
               existing_type=sa.VARCHAR(length=100),
               nullable=False)
    op.drop_column('admins', 'admin_id')
    op.add_column('admin_roles', sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False))
    op.drop_constraint(None, 'admin_roles', type_='foreignkey')
    op.drop_constraint(None, 'admin_roles', type_='foreignkey')
    op.create_index(op.f('ix_admin_roles_role_id'), 'admin_roles', ['role_id'], unique=False)
    op.create_index(op.f('ix_admin_roles_id'), 'admin_roles', ['id'], unique=False)
    op.create_index(op.f('ix_admin_roles_admin_id'), 'admin_roles', ['admin_id'], unique=False)
    op.alter_column('admin_roles', 'assigned_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.create_table('favorite_places',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('place_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('place_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('city', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('added_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('favorite_places_pkey'))
    )
    op.create_index(op.f('ix_favorite_places_user_id'), 'favorite_places', ['user_id'], unique=False)
    op.create_index(op.f('ix_favorite_places_id'), 'favorite_places', ['id'], unique=False)
    op.create_index(op.f('ix_favorite_places_city'), 'favorite_places', ['city'], unique=False)
    op.create_table('air_quality_records',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('city', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('source', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('pm10_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('pm25_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('o3_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('no2_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('co_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('so2_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('aqi_value', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('aqi_grade', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('station_name', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('latitude', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('longitude', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('air_quality_records_pkey'))
    )
    op.create_index(op.f('ix_air_quality_records_user_id'), 'air_quality_records', ['user_id'], unique=False)
    op.create_index(op.f('ix_air_quality_records_id'), 'air_quality_records', ['id'], unique=False)
    op.create_index(op.f('ix_air_quality_records_city'), 'air_quality_records', ['city'], unique=False)
    op.create_table('city_info',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('city', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('region', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('attractions', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('best_time_to_visit', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('population', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('area', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('city_info_pkey'))
    )
    op.create_index(op.f('ix_city_info_region'), 'city_info', ['region'], unique=False)
    op.create_index(op.f('ix_city_info_id'), 'city_info', ['id'], unique=False)
    op.create_index(op.f('ix_city_info_city'), 'city_info', ['city'], unique=False)
    op.create_table('accommodations',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('address', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('phone', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('rating', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('price_range', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('amenities', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('check_in', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('check_out', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('latitude', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('longitude', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('city', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('region', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('accommodations_pkey'))
    )
    op.create_index(op.f('ix_accommodations_type'), 'accommodations', ['type'], unique=False)
    op.create_index(op.f('ix_accommodations_region'), 'accommodations', ['region'], unique=False)
    op.create_index(op.f('ix_accommodations_name'), 'accommodations', ['name'], unique=False)
    op.create_index(op.f('ix_accommodations_id'), 'accommodations', ['id'], unique=False)
    op.create_index(op.f('ix_accommodations_city'), 'accommodations', ['city'], unique=False)
    op.create_table('transportations',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('route_info', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('operating_hours', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('fare_info', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('contact', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('city', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('region', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('transportations_pkey'))
    )
    op.create_index(op.f('ix_transportations_type'), 'transportations', ['type'], unique=False)
    op.create_index(op.f('ix_transportations_region'), 'transportations', ['region'], unique=False)
    op.create_index(op.f('ix_transportations_name'), 'transportations', ['name'], unique=False)
    op.create_index(op.f('ix_transportations_id'), 'transportations', ['id'], unique=False)
    op.create_index(op.f('ix_transportations_city'), 'transportations', ['city'], unique=False)
    op.create_table('email_verifications',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('verification_code', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('is_used', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('email_verifications_pkey'))
    )
    op.create_index(op.f('ix_email_verifications_id'), 'email_verifications', ['id'], unique=False)
    op.create_index(op.f('ix_email_verifications_email'), 'email_verifications', ['email'], unique=False)
    op.create_table('air_quality_favorites',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('city', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('added_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('air_quality_favorites_pkey'))
    )
    op.create_index(op.f('ix_air_quality_favorites_user_id'), 'air_quality_favorites', ['user_id'], unique=False)
    op.create_index(op.f('ix_air_quality_favorites_id'), 'air_quality_favorites', ['id'], unique=False)
    op.create_index(op.f('ix_air_quality_favorites_city'), 'air_quality_favorites', ['city'], unique=False)
    op.create_table('air_quality_health_profiles',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('has_respiratory_condition', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('has_heart_condition', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_pregnant', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('age_group', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('sensitivity_level', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('preferred_activities', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('air_quality_health_profiles_pkey'))
    )
    op.create_index(op.f('ix_air_quality_health_profiles_user_id'), 'air_quality_health_profiles', ['user_id'], unique=True)
    op.create_index(op.f('ix_air_quality_health_profiles_id'), 'air_quality_health_profiles', ['id'], unique=False)
    op.create_table('restaurants',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('address', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('phone', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('category', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('rating', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('price_range', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('operating_hours', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('latitude', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('longitude', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('city', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('region', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('restaurants_pkey'))
    )
    op.create_index(op.f('ix_restaurants_region'), 'restaurants', ['region'], unique=False)
    op.create_index(op.f('ix_restaurants_name'), 'restaurants', ['name'], unique=False)
    op.create_index(op.f('ix_restaurants_id'), 'restaurants', ['id'], unique=False)
    op.create_index(op.f('ix_restaurants_city'), 'restaurants', ['city'], unique=False)
    op.create_index(op.f('ix_restaurants_category'), 'restaurants', ['category'], unique=False)
    op.create_table('air_quality_alerts',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('city', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('alert_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('threshold_grade', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('air_quality_alerts_pkey'))
    )
    op.create_index(op.f('ix_air_quality_alerts_user_id'), 'air_quality_alerts', ['user_id'], unique=False)
    op.create_index(op.f('ix_air_quality_alerts_id'), 'air_quality_alerts', ['id'], unique=False)
    op.create_index(op.f('ix_air_quality_alerts_city'), 'air_quality_alerts', ['city'], unique=False)
    # ### end Alembic commands ###
