"""Add notification system tables

Revision ID: aae1984d85e0
Revises: f4184722f9ae
Create Date: 2025-07-16 18:35:04.586557

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'aae1984d85e0'
down_revision: Union[str, Sequence[str], None] = 'f4184722f9ae'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('city_info',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('city_name', sa.String(), nullable=False),
    sa.Column('region', sa.String(), nullable=False),
    sa.Column('population', sa.Integer(), nullable=True),
    sa.Column('area', sa.Float(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('attractions', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('weather_info', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('city_name')
    )
    op.create_index(op.f('ix_city_info_id'), 'city_info', ['id'], unique=False)
    op.create_table('notification_templates',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('type', sa.Enum('WEATHER_ALERT', 'TRAVEL_PLAN_UPDATE', 'RECOMMENDATION', 'MARKETING', 'SYSTEM', 'EMERGENCY', name='notificationtype'), nullable=False),
    sa.Column('channel', sa.Enum('PUSH', 'EMAIL', 'SMS', 'IN_APP', name='notificationchannel'), nullable=False),
    sa.Column('title_template', sa.String(length=255), nullable=False),
    sa.Column('message_template', sa.Text(), nullable=False),
    sa.Column('variables', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('version', sa.String(length=10), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_template_type_channel', 'notification_templates', ['type', 'channel', 'is_active'], unique=False)
    op.create_index(op.f('ix_notification_templates_channel'), 'notification_templates', ['channel'], unique=False)
    op.create_index(op.f('ix_notification_templates_id'), 'notification_templates', ['id'], unique=False)
    op.create_index(op.f('ix_notification_templates_name'), 'notification_templates', ['name'], unique=True)
    op.create_index(op.f('ix_notification_templates_type'), 'notification_templates', ['type'], unique=False)
    op.create_table('admin_activity_logs',
    sa.Column('log_id', sa.Integer(), nullable=False),
    sa.Column('admin_id', sa.Integer(), nullable=False),
    sa.Column('action', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('target_resource', sa.String(), nullable=True),
    sa.Column('severity', sa.String(), nullable=True),
    sa.Column('ip_address', sa.String(), nullable=True),
    sa.Column('user_agent', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['admin_id'], ['admins.admin_id'], ),
    sa.PrimaryKeyConstraint('log_id')
    )
    op.create_index(op.f('ix_admin_activity_logs_log_id'), 'admin_activity_logs', ['log_id'], unique=False)
    op.create_table('admin_batch_jobs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('job_type', sa.String(length=50), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('parameters', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('progress', sa.Float(), nullable=True),
    sa.Column('current_step', sa.String(length=255), nullable=True),
    sa.Column('total_steps', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=True),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('result_summary', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('stopped_by', sa.Integer(), nullable=True),
    sa.Column('priority', sa.Integer(), nullable=True),
    sa.Column('notification_email', sa.String(length=255), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['admins.admin_id'], ),
    sa.ForeignKeyConstraint(['stopped_by'], ['admins.admin_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_admin_batch_jobs_created_at', 'admin_batch_jobs', ['created_at'], unique=False)
    op.create_index('idx_admin_batch_jobs_type_status', 'admin_batch_jobs', ['job_type', 'status'], unique=False)
    op.create_index(op.f('ix_admin_batch_jobs_job_type'), 'admin_batch_jobs', ['job_type'], unique=False)
    op.create_index(op.f('ix_admin_batch_jobs_status'), 'admin_batch_jobs', ['status'], unique=False)
    op.create_table('notifications',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('type', sa.Enum('WEATHER_ALERT', 'TRAVEL_PLAN_UPDATE', 'RECOMMENDATION', 'MARKETING', 'SYSTEM', 'EMERGENCY', name='notificationtype'), nullable=False),
    sa.Column('channel', sa.Enum('PUSH', 'EMAIL', 'SMS', 'IN_APP', name='notificationchannel'), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'SENT', 'DELIVERED', 'READ', 'FAILED', name='notificationstatus'), nullable=True),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('message', sa.Text(), nullable=False),
    sa.Column('data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('priority', sa.Integer(), nullable=True),
    sa.Column('expires_at', sa.DateTime(), nullable=True),
    sa.Column('scheduled_at', sa.DateTime(), nullable=True),
    sa.Column('sent_at', sa.DateTime(), nullable=True),
    sa.Column('delivered_at', sa.DateTime(), nullable=True),
    sa.Column('read_at', sa.DateTime(), nullable=True),
    sa.Column('failure_reason', sa.String(), nullable=True),
    sa.Column('retry_count', sa.Integer(), nullable=True),
    sa.Column('max_retry_count', sa.Integer(), nullable=True),
    sa.Column('external_id', sa.String(), nullable=True),
    sa.Column('external_response', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_notification_created', 'notifications', ['created_at'], unique=False)
    op.create_index('idx_notification_scheduled', 'notifications', ['scheduled_at'], unique=False)
    op.create_index('idx_notification_type_channel', 'notifications', ['type', 'channel'], unique=False)
    op.create_index('idx_notification_user_status', 'notifications', ['user_id', 'status'], unique=False)
    op.create_index(op.f('ix_notifications_channel'), 'notifications', ['channel'], unique=False)
    op.create_index(op.f('ix_notifications_id'), 'notifications', ['id'], unique=False)
    op.create_index(op.f('ix_notifications_status'), 'notifications', ['status'], unique=False)
    op.create_index(op.f('ix_notifications_type'), 'notifications', ['type'], unique=False)
    op.create_index(op.f('ix_notifications_user_id'), 'notifications', ['user_id'], unique=False)
    op.create_table('user_device_tokens',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('device_token', sa.String(), nullable=False),
    sa.Column('device_type', sa.String(length=20), nullable=True),
    sa.Column('device_id', sa.String(), nullable=True),
    sa.Column('device_name', sa.String(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('last_used', sa.DateTime(), nullable=True),
    sa.Column('user_agent', sa.String(), nullable=True),
    sa.Column('app_version', sa.String(), nullable=True),
    sa.Column('os_version', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_device_token', 'user_device_tokens', ['device_token'], unique=False)
    op.create_index('idx_user_device_tokens', 'user_device_tokens', ['user_id', 'is_active'], unique=False)
    op.create_index(op.f('ix_user_device_tokens_device_token'), 'user_device_tokens', ['device_token'], unique=True)
    op.create_index(op.f('ix_user_device_tokens_id'), 'user_device_tokens', ['id'], unique=False)
    op.create_index(op.f('ix_user_device_tokens_user_id'), 'user_device_tokens', ['user_id'], unique=False)
    op.create_table('user_notification_settings',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('push_enabled', sa.Boolean(), nullable=True),
    sa.Column('email_enabled', sa.Boolean(), nullable=True),
    sa.Column('sms_enabled', sa.Boolean(), nullable=True),
    sa.Column('in_app_enabled', sa.Boolean(), nullable=True),
    sa.Column('weather_alerts', sa.Boolean(), nullable=True),
    sa.Column('travel_plan_updates', sa.Boolean(), nullable=True),
    sa.Column('recommendation_updates', sa.Boolean(), nullable=True),
    sa.Column('marketing_messages', sa.Boolean(), nullable=True),
    sa.Column('system_messages', sa.Boolean(), nullable=True),
    sa.Column('emergency_alerts', sa.Boolean(), nullable=True),
    sa.Column('quiet_hours_enabled', sa.Boolean(), nullable=True),
    sa.Column('quiet_hours_start', sa.String(length=5), nullable=True),
    sa.Column('quiet_hours_end', sa.String(length=5), nullable=True),
    sa.Column('digest_enabled', sa.Boolean(), nullable=True),
    sa.Column('digest_frequency', sa.String(length=20), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_user_notification_settings', 'user_notification_settings', ['user_id'], unique=False)
    op.create_index(op.f('ix_user_notification_settings_id'), 'user_notification_settings', ['id'], unique=False)
    op.create_index(op.f('ix_user_notification_settings_user_id'), 'user_notification_settings', ['user_id'], unique=False)
    op.create_table('admin_batch_job_details',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('job_id', sa.UUID(), nullable=False),
    sa.Column('timestamp', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('level', sa.String(length=20), nullable=False),
    sa.Column('message', sa.Text(), nullable=False),
    sa.Column('details', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.ForeignKeyConstraint(['job_id'], ['admin_batch_jobs.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_admin_batch_job_details_job_level', 'admin_batch_job_details', ['job_id', 'level'], unique=False)
    op.create_index('idx_admin_batch_job_details_timestamp', 'admin_batch_job_details', ['timestamp'], unique=False)
    op.create_index(op.f('ix_admin_batch_job_details_level'), 'admin_batch_job_details', ['level'], unique=False)
    op.create_index(op.f('ix_admin_batch_job_details_timestamp'), 'admin_batch_job_details', ['timestamp'], unique=False)
    op.create_table('notification_logs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('notification_id', sa.UUID(), nullable=False),
    sa.Column('event_type', sa.String(length=50), nullable=False),
    sa.Column('message', sa.Text(), nullable=True),
    sa.Column('details', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('timestamp', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['notification_id'], ['notifications.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_notification_log_event', 'notification_logs', ['notification_id', 'event_type'], unique=False)
    op.create_index('idx_notification_log_timestamp', 'notification_logs', ['timestamp'], unique=False)
    op.create_index(op.f('ix_notification_logs_id'), 'notification_logs', ['id'], unique=False)
    op.create_index(op.f('ix_notification_logs_notification_id'), 'notification_logs', ['notification_id'], unique=False)
    op.create_index(op.f('ix_notification_logs_timestamp'), 'notification_logs', ['timestamp'], unique=False)
    op.create_table('notification_queue',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('notification_id', sa.UUID(), nullable=False),
    sa.Column('queue_name', sa.String(length=50), nullable=False),
    sa.Column('priority', sa.Integer(), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=True),
    sa.Column('scheduled_for', sa.DateTime(), nullable=False),
    sa.Column('processed_at', sa.DateTime(), nullable=True),
    sa.Column('attempt_count', sa.Integer(), nullable=True),
    sa.Column('max_attempts', sa.Integer(), nullable=True),
    sa.Column('next_retry_at', sa.DateTime(), nullable=True),
    sa.Column('result', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['notification_id'], ['notifications.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_queue_priority', 'notification_queue', ['queue_name', 'priority'], unique=False)
    op.create_index('idx_queue_retry', 'notification_queue', ['next_retry_at'], unique=False)
    op.create_index('idx_queue_status_scheduled', 'notification_queue', ['status', 'scheduled_for'], unique=False)
    op.create_index(op.f('ix_notification_queue_id'), 'notification_queue', ['id'], unique=False)
    op.create_index(op.f('ix_notification_queue_notification_id'), 'notification_queue', ['notification_id'], unique=False)
    op.create_index(op.f('ix_notification_queue_queue_name'), 'notification_queue', ['queue_name'], unique=False)
    op.create_index(op.f('ix_notification_queue_scheduled_for'), 'notification_queue', ['scheduled_for'], unique=False)
    # Drop dependent views first
    op.execute('DROP VIEW IF EXISTS admin_permissions_view CASCADE')
    
    op.drop_index(op.f('idx_delegations_valid'), table_name='permission_delegations')
    op.drop_table('permission_delegations')
    op.drop_index(op.f('idx_role_permissions_permission'), table_name='role_permissions')
    op.drop_index(op.f('idx_role_permissions_role'), table_name='role_permissions')
    op.drop_table('role_permissions')
    op.drop_index(op.f('idx_transformation_logs_created_at'), table_name='data_transformation_logs')
    op.drop_index(op.f('idx_transformation_logs_status'), table_name='data_transformation_logs')
    op.drop_index(op.f('idx_transformation_logs_target_table'), table_name='data_transformation_logs')
    op.drop_table('data_transformation_logs')
    op.drop_table('resources')
    op.drop_index(op.f('idx_admin_roles_admin'), table_name='admin_roles')
    op.drop_index(op.f('idx_admin_roles_role'), table_name='admin_roles')
    op.drop_table('admin_roles')
    op.drop_table('batch_job_logs')
    op.drop_index(op.f('idx_audit_admin_date'), table_name='permission_audit_logs')
    op.drop_index(op.f('idx_audit_permission_date'), table_name='permission_audit_logs')
    op.drop_table('permission_audit_logs')
    op.drop_table('roles')
    op.drop_index(op.f('idx_permissions_resource_action'), table_name='permissions')
    op.drop_table('permissions')
    op.drop_constraint(op.f('admins_email_key'), 'admins', type_='unique')
    op.drop_index(op.f('ix_admins_email'), table_name='admins')
    op.create_index(op.f('ix_admins_email'), 'admins', ['email'], unique=True)
    op.alter_column('chat_messages', 'user_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('chat_messages', 'context',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.drop_index(op.f('ix_chat_messages_user_id'), table_name='chat_messages')
    op.create_index(op.f('ix_chat_messages_id'), 'chat_messages', ['id'], unique=False)
    op.drop_index(op.f('idx_contact_answer_contact_id'), table_name='contact_answers')
    op.add_column('favorite_places', sa.Column('address', sa.String(), nullable=True))
    op.add_column('favorite_places', sa.Column('latitude', sa.Float(), nullable=True))
    op.add_column('favorite_places', sa.Column('longitude', sa.Float(), nullable=True))
    op.add_column('favorite_places', sa.Column('description', sa.Text(), nullable=True))
    op.alter_column('favorite_places', 'id',
               existing_type=sa.UUID(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.alter_column('favorite_places', 'user_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('favorite_places', 'place_name',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('favorite_places', 'place_type',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.drop_index(op.f('ix_favorite_places_user_id'), table_name='favorite_places')
    op.create_index(op.f('ix_favorite_places_id'), 'favorite_places', ['id'], unique=False)
    op.drop_column('favorite_places', 'place_id')
    op.create_index('idx_historical_weather_region_date', 'historical_weather_daily', ['region_code', 'weather_date'], unique=False)
    op.create_index(op.f('ix_historical_weather_daily_id'), 'historical_weather_daily', ['id'], unique=False)
    op.create_index(op.f('ix_historical_weather_daily_region_code'), 'historical_weather_daily', ['region_code'], unique=False)
    op.create_index(op.f('ix_historical_weather_daily_weather_date'), 'historical_weather_daily', ['weather_date'], unique=False)
    op.alter_column('leisure_sports', 'content_id',
               existing_type=sa.VARCHAR(length=20),
               nullable=False)
    op.alter_column('leisure_sports', 'region_code',
               existing_type=sa.VARCHAR(length=10),
               nullable=False)
    op.alter_column('leisure_sports', 'facility_name',
               existing_type=sa.VARCHAR(length=200),
               nullable=False)
    op.alter_column('leisure_sports', 'reservation_info',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('leisure_sports', 'rental_info',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('leisure_sports', 'homepage',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('leisure_sports', 'data_quality_score',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               type_=sa.DECIMAL(precision=5, scale=2),
               existing_nullable=True)
    op.alter_column('leisure_sports', 'processing_status',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=20),
               existing_nullable=True)
    op.alter_column('leisure_sports', 'booktour',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.CHAR(length=1),
               existing_nullable=True)
    op.alter_column('leisure_sports', 'createdtime',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=14),
               existing_nullable=True)
    op.alter_column('leisure_sports', 'modifiedtime',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=14),
               existing_nullable=True)
    op.drop_constraint(op.f('leisure_sports_content_id_unique'), 'leisure_sports', type_='unique')
    op.create_index(op.f('ix_leisure_sports_content_id'), 'leisure_sports', ['content_id'], unique=False)
    op.create_index(op.f('ix_leisure_sports_facility_name'), 'leisure_sports', ['facility_name'], unique=False)
    op.create_index(op.f('ix_leisure_sports_raw_data_id'), 'leisure_sports', ['raw_data_id'], unique=False)
    op.create_index(op.f('ix_leisure_sports_region_code'), 'leisure_sports', ['region_code'], unique=False)
    op.drop_column('leisure_sports', 'description')
    op.drop_index(op.f('idx_likes_recommend_course_id'), table_name='likes_recommend')
    op.create_index(op.f('ix_likes_recommend_course_id'), 'likes_recommend', ['course_id'], unique=False)
    op.drop_index(op.f('idx_regions_api_mappings'), table_name='regions', postgresql_using='gin')
    op.drop_index(op.f('idx_regions_coordinate_info'), table_name='regions', postgresql_using='gin')
    op.drop_index(op.f('idx_regions_tour_api_area_code'), table_name='regions')
    op.create_index(op.f('ix_regions_tour_api_area_code'), 'regions', ['tour_api_area_code'], unique=False)
    op.drop_index(op.f('idx_restaurants_sigungu_code'), table_name='restaurants')
    op.drop_constraint(op.f('restaurants_content_id_key'), 'restaurants', type_='unique')
    op.drop_column('restaurants', 'sigungu_code')
    op.drop_constraint(op.f('uq_review_likes_review_user'), 'review_likes', type_='unique')
    op.create_unique_constraint('uq_review_like_user_type', 'review_likes', ['review_id', 'user_id', 'is_like'])
    op.create_foreign_key(None, 'review_likes', 'users', ['user_id'], ['user_id'])
    op.add_column('reviews', sa.Column('destination_id', sa.UUID(), nullable=True))
    op.alter_column('reviews', 'user_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.drop_index(op.f('ix_reviews_place_id'), table_name='reviews')
    op.drop_index(op.f('ix_reviews_user_id'), table_name='reviews')
    op.create_index('idx_review_destination_date', 'reviews', ['destination_id', 'created_at'], unique=False)
    op.create_index('idx_review_user_rating', 'reviews', ['user_id', 'rating'], unique=False)
    op.create_index(op.f('ix_reviews_id'), 'reviews', ['id'], unique=False)
    op.create_foreign_key(None, 'reviews', 'destinations', ['destination_id'], ['destination_id'])
    op.drop_column('reviews', 'updated_at')
    op.drop_column('reviews', 'place_id')
    op.drop_index(op.f('idx_reviews_recommend_course_id'), table_name='reviews_recommend')
    op.drop_index(op.f('idx_reviews_recommend_created_at'), table_name='reviews_recommend')
    op.drop_index(op.f('idx_reviews_recommend_user_id'), table_name='reviews_recommend')
    op.create_index(op.f('ix_reviews_recommend_course_id'), 'reviews_recommend', ['course_id'], unique=False)
    op.drop_index(op.f('idx_tourist_attractions_sigungu_code'), table_name='tourist_attractions')
    op.drop_column('tourist_attractions', 'sigungu_code')
    op.alter_column('transportation_details', 'travel_route_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('transportation_details', 'notes',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.drop_index(op.f('ix_transportation_details_travel_route_id'), table_name='transportation_details')
    op.create_index(op.f('ix_transportation_details_id'), 'transportation_details', ['id'], unique=False)
    op.add_column('travel_course_likes', sa.Column('itinerary', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.drop_column('travel_course_likes', 'updated_at')
    op.drop_column('travel_course_likes', 'created_at')
    op.drop_constraint(op.f('travel_courses_content_id_key'), 'travel_courses', type_='unique')
    op.drop_index(op.f('ix_travel_plans_id'), table_name='travel_plans')
    op.drop_index(op.f('ix_travel_plans_user_id'), table_name='travel_plans')
    op.create_index('idx_travel_plan_dates', 'travel_plans', ['start_date', 'end_date'], unique=False)
    op.create_index('idx_travel_plan_user_status', 'travel_plans', ['user_id', 'status'], unique=False)
    op.create_index(op.f('ix_travel_plans_plan_id'), 'travel_plans', ['plan_id'], unique=False)
    op.alter_column('travel_routes', 'travel_plan_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.drop_index(op.f('ix_travel_routes_travel_plan_id'), table_name='travel_routes')
    op.create_index(op.f('ix_travel_routes_id'), 'travel_routes', ['id'], unique=False)
    op.drop_index(op.f('idx_activity_type'), table_name='user_activity_logs')
    op.drop_index(op.f('idx_activity_user_created'), table_name='user_activity_logs')
    op.drop_constraint(op.f('users_email_key'), 'users', type_='unique')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.drop_constraint(op.f('unique_weather_current_region_date'), 'weather_current', type_='unique')
    op.create_index(op.f('ix_weather_current_id'), 'weather_current', ['id'], unique=False)
    op.create_index(op.f('ix_weather_current_region_code'), 'weather_current', ['region_code'], unique=False)
    op.add_column('weather_data', sa.Column('weather_id', sa.UUID(), nullable=False))
    op.add_column('weather_data', sa.Column('grid_x', sa.Integer(), nullable=True))
    op.add_column('weather_data', sa.Column('grid_y', sa.Integer(), nullable=True))
    op.add_column('weather_data', sa.Column('forecast_date', sa.Date(), nullable=False))
    op.add_column('weather_data', sa.Column('forecast_time', sa.String(), nullable=True))
    op.add_column('weather_data', sa.Column('base_date', sa.Date(), nullable=True))
    op.add_column('weather_data', sa.Column('base_time', sa.String(), nullable=True))
    op.add_column('weather_data', sa.Column('temperature_max', sa.Float(), nullable=True))
    op.add_column('weather_data', sa.Column('temperature_min', sa.Float(), nullable=True))
    op.add_column('weather_data', sa.Column('precipitation_probability', sa.Float(), nullable=True))
    op.add_column('weather_data', sa.Column('precipitation_type', sa.String(), nullable=True))
    op.add_column('weather_data', sa.Column('sky_condition', sa.String(), nullable=True))
    op.add_column('weather_data', sa.Column('region_name', sa.String(), nullable=True))
    op.add_column('weather_data', sa.Column('raw_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.alter_column('weather_data', 'humidity',
               existing_type=sa.INTEGER(),
               type_=sa.Float(),
               existing_nullable=True)
    op.drop_index(op.f('idx_weather_region_time'), table_name='weather_data')
    op.drop_index(op.f('ix_weather_data_id'), table_name='weather_data')
    op.drop_index(op.f('ix_weather_data_region_code'), table_name='weather_data')
    op.create_index('idx_weather_destination_date', 'weather_data', ['destination_id', 'forecast_date'], unique=False)
    op.create_index('idx_weather_forecast_location', 'weather_data', ['forecast_date', 'grid_x', 'grid_y'], unique=False)
    op.create_index(op.f('ix_weather_data_weather_id'), 'weather_data', ['weather_id'], unique=False)
    op.drop_constraint(op.f('weather_data_region_code_fkey'), 'weather_data', type_='foreignkey')
    op.drop_column('weather_data', 'weather_description')
    op.drop_column('weather_data', 'uv_index')
    op.drop_column('weather_data', 'id')
    op.drop_column('weather_data', 'feels_like')
    op.drop_column('weather_data', 'visibility')
    op.drop_column('weather_data', 'region_code')
    op.drop_column('weather_data', 'wind_speed')
    op.drop_column('weather_data', 'precipitation')
    op.drop_column('weather_data', 'observation_time')
    op.drop_column('weather_data', 'cloud_coverage')
    op.drop_constraint(op.f('unique_weather_forecast_region_date'), 'weather_forecast', type_='unique')
    op.create_index('idx_weather_forecast_region_date', 'weather_forecast', ['region_code', 'forecast_date'], unique=False)
    op.create_index(op.f('ix_weather_forecast_forecast_date'), 'weather_forecast', ['forecast_date'], unique=False)
    op.create_index(op.f('ix_weather_forecast_id'), 'weather_forecast', ['id'], unique=False)
    op.create_index(op.f('ix_weather_forecast_region_code'), 'weather_forecast', ['region_code'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_weather_forecast_region_code'), table_name='weather_forecast')
    op.drop_index(op.f('ix_weather_forecast_id'), table_name='weather_forecast')
    op.drop_index(op.f('ix_weather_forecast_forecast_date'), table_name='weather_forecast')
    op.drop_index('idx_weather_forecast_region_date', table_name='weather_forecast')
    op.create_unique_constraint(op.f('unique_weather_forecast_region_date'), 'weather_forecast', ['region_code', 'forecast_date'], postgresql_nulls_not_distinct=False)
    op.add_column('weather_data', sa.Column('cloud_coverage', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('weather_data', sa.Column('observation_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.add_column('weather_data', sa.Column('precipitation', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('weather_data', sa.Column('wind_speed', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('weather_data', sa.Column('region_code', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('weather_data', sa.Column('visibility', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('weather_data', sa.Column('feels_like', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('weather_data', sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False))
    op.add_column('weather_data', sa.Column('uv_index', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('weather_data', sa.Column('weather_description', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.create_foreign_key(op.f('weather_data_region_code_fkey'), 'weather_data', 'regions', ['region_code'], ['region_code'])
    op.drop_index(op.f('ix_weather_data_weather_id'), table_name='weather_data')
    op.drop_index('idx_weather_forecast_location', table_name='weather_data')
    op.drop_index('idx_weather_destination_date', table_name='weather_data')
    op.create_index(op.f('ix_weather_data_region_code'), 'weather_data', ['region_code'], unique=False)
    op.create_index(op.f('ix_weather_data_id'), 'weather_data', ['id'], unique=False)
    op.create_index(op.f('idx_weather_region_time'), 'weather_data', ['region_code', 'observation_time'], unique=False)
    op.alter_column('weather_data', 'humidity',
               existing_type=sa.Float(),
               type_=sa.INTEGER(),
               existing_nullable=True)
    op.drop_column('weather_data', 'raw_data')
    op.drop_column('weather_data', 'region_name')
    op.drop_column('weather_data', 'sky_condition')
    op.drop_column('weather_data', 'precipitation_type')
    op.drop_column('weather_data', 'precipitation_probability')
    op.drop_column('weather_data', 'temperature_min')
    op.drop_column('weather_data', 'temperature_max')
    op.drop_column('weather_data', 'base_time')
    op.drop_column('weather_data', 'base_date')
    op.drop_column('weather_data', 'forecast_time')
    op.drop_column('weather_data', 'forecast_date')
    op.drop_column('weather_data', 'grid_y')
    op.drop_column('weather_data', 'grid_x')
    op.drop_column('weather_data', 'weather_id')
    op.drop_index(op.f('ix_weather_current_region_code'), table_name='weather_current')
    op.drop_index(op.f('ix_weather_current_id'), table_name='weather_current')
    op.create_unique_constraint(op.f('unique_weather_current_region_date'), 'weather_current', ['region_code', 'weather_date'], postgresql_nulls_not_distinct=False)
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=False)
    op.create_unique_constraint(op.f('users_email_key'), 'users', ['email'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('idx_activity_user_created'), 'user_activity_logs', ['user_id', 'created_at'], unique=False)
    op.create_index(op.f('idx_activity_type'), 'user_activity_logs', ['activity_type'], unique=False)
    op.drop_index(op.f('ix_travel_routes_id'), table_name='travel_routes')
    op.create_index(op.f('ix_travel_routes_travel_plan_id'), 'travel_routes', ['travel_plan_id'], unique=False)
    op.alter_column('travel_routes', 'travel_plan_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.drop_index(op.f('ix_travel_plans_plan_id'), table_name='travel_plans')
    op.drop_index('idx_travel_plan_user_status', table_name='travel_plans')
    op.drop_index('idx_travel_plan_dates', table_name='travel_plans')
    op.create_index(op.f('ix_travel_plans_user_id'), 'travel_plans', ['user_id'], unique=False)
    op.create_index(op.f('ix_travel_plans_id'), 'travel_plans', ['plan_id'], unique=False)
    op.create_unique_constraint(op.f('travel_courses_content_id_key'), 'travel_courses', ['content_id'], postgresql_nulls_not_distinct=False)
    op.add_column('travel_course_likes', sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True))
    op.add_column('travel_course_likes', sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True))
    op.drop_column('travel_course_likes', 'itinerary')
    op.drop_index(op.f('ix_transportation_details_id'), table_name='transportation_details')
    op.create_index(op.f('ix_transportation_details_travel_route_id'), 'transportation_details', ['travel_route_id'], unique=False)
    op.alter_column('transportation_details', 'notes',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('transportation_details', 'travel_route_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.add_column('tourist_attractions', sa.Column('sigungu_code', sa.VARCHAR(length=20), autoincrement=False, nullable=True, comment='시군구 코드 (KTO API)'))
    op.create_index(op.f('idx_tourist_attractions_sigungu_code'), 'tourist_attractions', ['sigungu_code'], unique=False)
    op.drop_index(op.f('ix_reviews_recommend_course_id'), table_name='reviews_recommend')
    op.create_index(op.f('idx_reviews_recommend_user_id'), 'reviews_recommend', ['user_id'], unique=False)
    op.create_index(op.f('idx_reviews_recommend_created_at'), 'reviews_recommend', ['created_at'], unique=False)
    op.create_index(op.f('idx_reviews_recommend_course_id'), 'reviews_recommend', ['course_id'], unique=False)
    op.add_column('reviews', sa.Column('place_id', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('reviews', sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'reviews', type_='foreignkey')
    op.drop_index(op.f('ix_reviews_id'), table_name='reviews')
    op.drop_index('idx_review_user_rating', table_name='reviews')
    op.drop_index('idx_review_destination_date', table_name='reviews')
    op.create_index(op.f('ix_reviews_user_id'), 'reviews', ['user_id'], unique=False)
    op.create_index(op.f('ix_reviews_place_id'), 'reviews', ['place_id'], unique=False)
    op.alter_column('reviews', 'user_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.drop_column('reviews', 'destination_id')
    op.drop_constraint(None, 'review_likes', type_='foreignkey')
    op.drop_constraint('uq_review_like_user_type', 'review_likes', type_='unique')
    op.create_unique_constraint(op.f('uq_review_likes_review_user'), 'review_likes', ['review_id', 'user_id'], postgresql_nulls_not_distinct=False)
    op.add_column('restaurants', sa.Column('sigungu_code', sa.VARCHAR(length=20), autoincrement=False, nullable=True, comment='시군구 코드 (KTO API)'))
    op.create_unique_constraint(op.f('restaurants_content_id_key'), 'restaurants', ['content_id'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('idx_restaurants_sigungu_code'), 'restaurants', ['sigungu_code'], unique=False)
    op.drop_index(op.f('ix_regions_tour_api_area_code'), table_name='regions')
    op.create_index(op.f('idx_regions_tour_api_area_code'), 'regions', ['tour_api_area_code'], unique=False)
    op.create_index(op.f('idx_regions_coordinate_info'), 'regions', ['coordinate_info'], unique=False, postgresql_using='gin')
    op.create_index(op.f('idx_regions_api_mappings'), 'regions', ['api_mappings'], unique=False, postgresql_using='gin')
    op.drop_index(op.f('ix_likes_recommend_course_id'), table_name='likes_recommend')
    op.create_index(op.f('idx_likes_recommend_course_id'), 'likes_recommend', ['course_id'], unique=False)
    op.add_column('leisure_sports', sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_leisure_sports_region_code'), table_name='leisure_sports')
    op.drop_index(op.f('ix_leisure_sports_raw_data_id'), table_name='leisure_sports')
    op.drop_index(op.f('ix_leisure_sports_facility_name'), table_name='leisure_sports')
    op.drop_index(op.f('ix_leisure_sports_content_id'), table_name='leisure_sports')
    op.create_unique_constraint(op.f('leisure_sports_content_id_unique'), 'leisure_sports', ['content_id'], postgresql_nulls_not_distinct=False)
    op.alter_column('leisure_sports', 'modifiedtime',
               existing_type=sa.String(length=14),
               type_=sa.VARCHAR(length=50),
               existing_nullable=True)
    op.alter_column('leisure_sports', 'createdtime',
               existing_type=sa.String(length=14),
               type_=sa.VARCHAR(length=50),
               existing_nullable=True)
    op.alter_column('leisure_sports', 'booktour',
               existing_type=sa.CHAR(length=1),
               type_=sa.VARCHAR(length=50),
               existing_nullable=True)
    op.alter_column('leisure_sports', 'processing_status',
               existing_type=sa.String(length=20),
               type_=sa.VARCHAR(length=50),
               existing_nullable=True)
    op.alter_column('leisure_sports', 'data_quality_score',
               existing_type=sa.DECIMAL(precision=5, scale=2),
               type_=sa.NUMERIC(precision=10, scale=2),
               existing_nullable=True)
    op.alter_column('leisure_sports', 'homepage',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('leisure_sports', 'rental_info',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('leisure_sports', 'reservation_info',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('leisure_sports', 'facility_name',
               existing_type=sa.VARCHAR(length=200),
               nullable=True)
    op.alter_column('leisure_sports', 'region_code',
               existing_type=sa.VARCHAR(length=10),
               nullable=True)
    op.alter_column('leisure_sports', 'content_id',
               existing_type=sa.VARCHAR(length=20),
               nullable=True)
    op.drop_index(op.f('ix_historical_weather_daily_weather_date'), table_name='historical_weather_daily')
    op.drop_index(op.f('ix_historical_weather_daily_region_code'), table_name='historical_weather_daily')
    op.drop_index(op.f('ix_historical_weather_daily_id'), table_name='historical_weather_daily')
    op.drop_index('idx_historical_weather_region_date', table_name='historical_weather_daily')
    op.add_column('favorite_places', sa.Column('place_id', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.drop_index(op.f('ix_favorite_places_id'), table_name='favorite_places')
    op.create_index(op.f('ix_favorite_places_user_id'), 'favorite_places', ['user_id'], unique=False)
    op.alter_column('favorite_places', 'place_type',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('favorite_places', 'place_name',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('favorite_places', 'user_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.alter_column('favorite_places', 'id',
               existing_type=sa.Integer(),
               type_=sa.UUID(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text('gen_random_uuid()'))
    op.drop_column('favorite_places', 'description')
    op.drop_column('favorite_places', 'longitude')
    op.drop_column('favorite_places', 'latitude')
    op.drop_column('favorite_places', 'address')
    op.create_index(op.f('idx_contact_answer_contact_id'), 'contact_answers', ['contact_id'], unique=False)
    op.drop_index(op.f('ix_chat_messages_id'), table_name='chat_messages')
    op.create_index(op.f('ix_chat_messages_user_id'), 'chat_messages', ['user_id'], unique=False)
    op.alter_column('chat_messages', 'context',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('chat_messages', 'user_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.drop_index(op.f('ix_admins_email'), table_name='admins')
    op.create_index(op.f('ix_admins_email'), 'admins', ['email'], unique=False)
    op.create_unique_constraint(op.f('admins_email_key'), 'admins', ['email'], postgresql_nulls_not_distinct=False)
    op.create_table('permissions',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('permissions_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False, comment='권한명 형식: resource.action (예: users.read)'),
    sa.Column('resource_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('action', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['resource_id'], ['resources.id'], name='permissions_resource_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='permissions_pkey'),
    sa.UniqueConstraint('name', name='permissions_name_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    comment='세부 권한 정의',
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('idx_permissions_resource_action'), 'permissions', ['resource_id', 'action'], unique=False)
    op.create_table('roles',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('roles_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('display_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_system', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True, comment='시스템 기본 역할 여부 (삭제 불가)'),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='roles_pkey'),
    sa.UniqueConstraint('name', name='roles_name_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    comment='관리자 역할 정의',
    postgresql_ignore_search_path=False
    )
    op.create_table('permission_audit_logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('admin_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('permission_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('action', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('resource_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('resource_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('success', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('failure_reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('ip_address', sa.VARCHAR(length=45), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['admin_id'], ['admins.admin_id'], name=op.f('permission_audit_logs_admin_id_fkey')),
    sa.ForeignKeyConstraint(['permission_id'], ['permissions.id'], name=op.f('permission_audit_logs_permission_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('permission_audit_logs_pkey')),
    comment='권한 사용 감사 로그'
    )
    op.create_index(op.f('idx_audit_permission_date'), 'permission_audit_logs', ['permission_id', 'created_at'], unique=False)
    op.create_index(op.f('idx_audit_admin_date'), 'permission_audit_logs', ['admin_id', 'created_at'], unique=False)
    op.create_table('batch_job_logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('job_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('job_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('job_type', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('start_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('end_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('duration', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('parameters', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('result', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('batch_job_logs_pkey'))
    )
    op.create_table('admin_roles',
    sa.Column('admin_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('role_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('assigned_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('assigned_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['admin_id'], ['admins.admin_id'], name=op.f('admin_roles_admin_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['assigned_by'], ['admins.admin_id'], name=op.f('admin_roles_assigned_by_fkey')),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], name=op.f('admin_roles_role_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('admin_id', 'role_id', name=op.f('admin_roles_pkey')),
    comment='관리자-역할 매핑'
    )
    op.create_index(op.f('idx_admin_roles_role'), 'admin_roles', ['role_id'], unique=False)
    op.create_index(op.f('idx_admin_roles_admin'), 'admin_roles', ['admin_id'], unique=False)
    op.create_table('resources',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('resources_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('display_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('module', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='리소스 그룹 (user_management, content_management, system_settings, analytics)'),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='resources_pkey'),
    sa.UniqueConstraint('name', name='resources_name_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    comment='보호된 리소스 정의',
    postgresql_ignore_search_path=False
    )
    op.create_table('data_transformation_logs',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('raw_data_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('target_table', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('transformation_rule', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('input_record_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('output_record_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('error_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('transformation_time_ms', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('error_details', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('quality_score', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.CheckConstraint("status::text = ANY (ARRAY['pending'::character varying, 'processing'::character varying, 'success'::character varying, 'partial_failure'::character varying, 'failure'::character varying]::text[])", name=op.f('chk_transformation_status')),
    sa.ForeignKeyConstraint(['raw_data_id'], ['api_raw_data.id'], name=op.f('data_transformation_logs_raw_data_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('data_transformation_logs_pkey'))
    )
    op.create_index(op.f('idx_transformation_logs_target_table'), 'data_transformation_logs', ['target_table'], unique=False)
    op.create_index(op.f('idx_transformation_logs_status'), 'data_transformation_logs', ['status'], unique=False)
    op.create_index(op.f('idx_transformation_logs_created_at'), 'data_transformation_logs', ['created_at'], unique=False)
    op.create_table('role_permissions',
    sa.Column('role_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('permission_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['permission_id'], ['permissions.id'], name=op.f('role_permissions_permission_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], name=op.f('role_permissions_role_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('role_id', 'permission_id', name=op.f('role_permissions_pkey')),
    comment='역할-권한 매핑'
    )
    op.create_index(op.f('idx_role_permissions_role'), 'role_permissions', ['role_id'], unique=False)
    op.create_index(op.f('idx_role_permissions_permission'), 'role_permissions', ['permission_id'], unique=False)
    op.create_table('permission_delegations',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('from_admin_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('to_admin_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('permission_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('valid_from', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('valid_until', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('revoked_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('revoked_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['from_admin_id'], ['admins.admin_id'], name=op.f('permission_delegations_from_admin_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['permission_id'], ['permissions.id'], name=op.f('permission_delegations_permission_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['revoked_by'], ['admins.admin_id'], name=op.f('permission_delegations_revoked_by_fkey')),
    sa.ForeignKeyConstraint(['to_admin_id'], ['admins.admin_id'], name=op.f('permission_delegations_to_admin_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('permission_delegations_pkey')),
    comment='임시 권한 위임'
    )
    op.create_index(op.f('idx_delegations_valid'), 'permission_delegations', ['to_admin_id', 'valid_from', 'valid_until'], unique=False)
    op.drop_index(op.f('ix_notification_queue_scheduled_for'), table_name='notification_queue')
    op.drop_index(op.f('ix_notification_queue_queue_name'), table_name='notification_queue')
    op.drop_index(op.f('ix_notification_queue_notification_id'), table_name='notification_queue')
    op.drop_index(op.f('ix_notification_queue_id'), table_name='notification_queue')
    op.drop_index('idx_queue_status_scheduled', table_name='notification_queue')
    op.drop_index('idx_queue_retry', table_name='notification_queue')
    op.drop_index('idx_queue_priority', table_name='notification_queue')
    op.drop_table('notification_queue')
    op.drop_index(op.f('ix_notification_logs_timestamp'), table_name='notification_logs')
    op.drop_index(op.f('ix_notification_logs_notification_id'), table_name='notification_logs')
    op.drop_index(op.f('ix_notification_logs_id'), table_name='notification_logs')
    op.drop_index('idx_notification_log_timestamp', table_name='notification_logs')
    op.drop_index('idx_notification_log_event', table_name='notification_logs')
    op.drop_table('notification_logs')
    op.drop_index(op.f('ix_admin_batch_job_details_timestamp'), table_name='admin_batch_job_details')
    op.drop_index(op.f('ix_admin_batch_job_details_level'), table_name='admin_batch_job_details')
    op.drop_index('idx_admin_batch_job_details_timestamp', table_name='admin_batch_job_details')
    op.drop_index('idx_admin_batch_job_details_job_level', table_name='admin_batch_job_details')
    op.drop_table('admin_batch_job_details')
    op.drop_index(op.f('ix_user_notification_settings_user_id'), table_name='user_notification_settings')
    op.drop_index(op.f('ix_user_notification_settings_id'), table_name='user_notification_settings')
    op.drop_index('idx_user_notification_settings', table_name='user_notification_settings')
    op.drop_table('user_notification_settings')
    op.drop_index(op.f('ix_user_device_tokens_user_id'), table_name='user_device_tokens')
    op.drop_index(op.f('ix_user_device_tokens_id'), table_name='user_device_tokens')
    op.drop_index(op.f('ix_user_device_tokens_device_token'), table_name='user_device_tokens')
    op.drop_index('idx_user_device_tokens', table_name='user_device_tokens')
    op.drop_index('idx_device_token', table_name='user_device_tokens')
    op.drop_table('user_device_tokens')
    op.drop_index(op.f('ix_notifications_user_id'), table_name='notifications')
    op.drop_index(op.f('ix_notifications_type'), table_name='notifications')
    op.drop_index(op.f('ix_notifications_status'), table_name='notifications')
    op.drop_index(op.f('ix_notifications_id'), table_name='notifications')
    op.drop_index(op.f('ix_notifications_channel'), table_name='notifications')
    op.drop_index('idx_notification_user_status', table_name='notifications')
    op.drop_index('idx_notification_type_channel', table_name='notifications')
    op.drop_index('idx_notification_scheduled', table_name='notifications')
    op.drop_index('idx_notification_created', table_name='notifications')
    op.drop_table('notifications')
    op.drop_index(op.f('ix_admin_batch_jobs_status'), table_name='admin_batch_jobs')
    op.drop_index(op.f('ix_admin_batch_jobs_job_type'), table_name='admin_batch_jobs')
    op.drop_index('idx_admin_batch_jobs_type_status', table_name='admin_batch_jobs')
    op.drop_index('idx_admin_batch_jobs_created_at', table_name='admin_batch_jobs')
    op.drop_table('admin_batch_jobs')
    op.drop_index(op.f('ix_admin_activity_logs_log_id'), table_name='admin_activity_logs')
    op.drop_table('admin_activity_logs')
    op.drop_index(op.f('ix_notification_templates_type'), table_name='notification_templates')
    op.drop_index(op.f('ix_notification_templates_name'), table_name='notification_templates')
    op.drop_index(op.f('ix_notification_templates_id'), table_name='notification_templates')
    op.drop_index(op.f('ix_notification_templates_channel'), table_name='notification_templates')
    op.drop_index('idx_template_type_channel', table_name='notification_templates')
    op.drop_table('notification_templates')
    op.drop_index(op.f('ix_city_info_id'), table_name='city_info')
    op.drop_table('city_info')
    # ### end Alembic commands ###
