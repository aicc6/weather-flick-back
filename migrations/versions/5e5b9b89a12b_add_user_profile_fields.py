"""add_user_profile_fields

Revision ID: 5e5b9b89a12b
Revises: 4b09feeeea4f
Create Date: 2025-07-01 11:13:56.191995

"""
from collections.abc import Sequence

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '5e5b9b89a12b'
down_revision: str | Sequence[str] | None = '4b09feeeea4f'
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_city_weather_data_city_name'), table_name='city_weather_data')
    op.drop_index(op.f('ix_city_weather_data_id'), table_name='city_weather_data')
    op.drop_table('city_weather_data')
    op.add_column('users', sa.Column('preferred_region', sa.String(), nullable=True))
    op.add_column('users', sa.Column('preferred_theme', sa.String(), nullable=True))
    op.add_column('users', sa.Column('bio', sa.Text(), nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('users', 'bio')
    op.drop_column('users', 'preferred_theme')
    op.drop_column('users', 'preferred_region')
    op.create_table('city_weather_data',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('city_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('nx', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('ny', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('latitude', sa.NUMERIC(precision=10, scale=8), autoincrement=False, nullable=True),
    sa.Column('longitude', sa.NUMERIC(precision=11, scale=8), autoincrement=False, nullable=True),
    sa.Column('temperature', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('humidity', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('precipitation', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('wind_speed', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('wind_direction', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('sky_condition', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('precipitation_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('weather_description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('forecast_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('base_date', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('base_time', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('data_source', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('city_weather_data_pkey')),
    sa.UniqueConstraint('city_name', 'forecast_time', name=op.f('_city_forecast_time_uc'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_city_weather_data_id'), 'city_weather_data', ['id'], unique=False)
    op.create_index(op.f('ix_city_weather_data_city_name'), 'city_weather_data', ['city_name'], unique=False)
    # ### end Alembic commands ###
